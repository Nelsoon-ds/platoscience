Please analyze this code for: Error handling, Edge cases, Performance optimization, Best practices, Please do not unnecessarily remove any comments or code. Generate the code with clear comments explaining the logic.

dashboards\qeeg-eeeg.html:
<code>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Neurofeedback Provider Directory</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Calm Harmony (Off-white, Sage Green, Soft Ochre) -->
    <!-- Application Structure Plan: A task-oriented interactive dashboard. Users select their primary goal (Sales, Partnership, or Research) which dynamically filters the view to show the most relevant strategies and a pre-filtered directory of resources. This is more efficient than a linear report, guiding users directly to actionable information based on their intent. -->
    <!-- Visualization & Content Choices: Goal: Compare source types -> Viz: Chart.js Scatter Plot (Volume vs. Quality) -> Interaction: Hover for details, click to filter. Justification: Visually summarizes the core trade-off of the report instantly. Goal: Provide access to resources -> Viz: Filterable HTML Table -> Interaction: Filter by category, search. Justification: Manages the large list of links effectively. Goal: Show regional context -> Viz: Tabbed/Accordion Text Blocks -> Interaction: Click to reveal. Justification: Simpler and more effective than a map for the given text. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f7f4;
            color: #3d405b;
        }
        .nav-button {
            transition: all 0.3s ease;
            border-bottom: 2px solid transparent;
        }
        .nav-button.active, .nav-button:hover {
            border-bottom-color: #81b29a;
            color: #3d405b;
        }
        .goal-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .goal-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            height: 350px;
            max-height: 50vh;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 450px;
            }
        }
        .table-link {
            color: #81b29a;
            text-decoration: none;
            transition: color 0.2s;
        }
        .table-link:hover {
            color: #6a947e;
        }
        .filter-btn.active {
            background-color: #3d405b;
            color: #f4f1de;
        }
        .filter-btn {
            transition: all 0.2s ease-in-out;
        }
    </style>
</head>
<body class="antialiased">

    <div class="min-h-screen">
        <header class="bg-white/80 backdrop-blur-lg shadow-sm sticky top-0 z-20">
            <div class="container mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <h1 class="text-2xl font-bold text-[#3d405b]">Neurofeedback Provider Directory</h1>
                    <nav class="hidden md:flex space-x-8">
                        <button onclick="showView('dashboard')" class="nav-button active" data-nav="dashboard">Dashboard</button>
                        <button onclick="showView('directory')" class="nav-button" data-nav="directory">Full Directory</button>
                        <button onclick="showView('regional')" class="nav-button" data-nav="regional">Regional Analysis</button>
                    </nav>
                    <div class="md:hidden">
                        <select id="mobile-nav" class="bg-white border border-gray-300 rounded-md py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-[#81b29a] focus:border-transparent">
                            <option value="dashboard">Dashboard</option>
                            <option value="directory">Full Directory</option>
                            <option value="regional">Regional Analysis</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>

        <main id="main-content" class="container mx-auto p-4 sm:p-6 lg:p-8">
            
            <div id="dashboard-view">
                <section id="intro" class="text-center mb-12">
                    <h2 class="text-4xl font-bold tracking-tight text-[#3d405b] sm:text-5xl">Navigate a Fragmented Landscape</h2>
                    <p class="mt-6 text-lg leading-8 text-gray-600 max-w-3xl mx-auto">The global provider ecosystem for QEEG, EEG, and neurofeedback is a complex mosaic of distinct, often overlapping, communities. This interactive tool is designed to help you find the right providers by aligning your search with your strategic goals.</p>
                </section>

                <section id="goal-selector" class="mb-12">
                    <h3 class="text-2xl font-semibold text-center mb-8 text-[#3d405b]">What is Your Primary Objective?</h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                        <div onclick="selectGoal('sales')" class="goal-card cursor-pointer bg-white p-8 rounded-xl shadow-md border border-transparent hover:border-[#e07a5f]">
                            <div class="text-3xl mb-4 text-[#e07a5f]">üìà</div>
                            <h4 class="text-xl font-bold mb-2">Mass-Market Sales</h4>
                            <p class="text-gray-600">Generate the largest possible list of commercially active providers for marketing campaigns and broad outreach.</p>
                        </div>
                        <div onclick="selectGoal('partnership')" class="goal-card cursor-pointer bg-white p-8 rounded-xl shadow-md border border-transparent hover:border-[#81b29a]">
                            <div class="text-3xl mb-4 text-[#81b29a]">ü§ù</div>
                            <h4 class="text-xl font-bold mb-2">High-Quality Partnerships</h4>
                            <p class="text-gray-600">Identify credible, certified, and professionally active providers for partnerships or reference sites.</p>
                        </div>
                        <div onclick="selectGoal('research')" class="goal-card cursor-pointer bg-white p-8 rounded-xl shadow-md border border-transparent hover:border-[#3d405b]">
                            <div class="text-3xl mb-4 text-[#3d405b]">üî¨</div>
                            <h4 class="text-xl font-bold mb-2">Scientific Engagement</h4>
                            <p class="text-gray-600">Find top-tier academic and clinical researchers (KOLs) for scientific advisory or validation studies.</p>
                        </div>
                    </div>
                </section>

                <section id="strategy-display" class="bg-white p-8 rounded-xl shadow-lg mb-12" style="display: none;">
                    <div class="flex justify-between items-start">
                        <h3 id="strategy-title" class="text-2xl font-bold text-[#3d405b] mb-4"></h3>
                        <button onclick="resetDashboard()" class="text-gray-500 hover:text-gray-800">&times; Reset</button>
                    </div>
                    <p id="strategy-text" class="text-gray-700 leading-relaxed"></p>
                </section>

                <section id="comparison-chart" class="mb-12 bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-2xl font-semibold text-center mb-2 text-[#3d405b]">Source Category Analysis</h3>
                    <p class="text-center text-gray-600 mb-6">Compare directory types by their potential for lead volume versus quality.</p>
                    <div class="chart-container">
                        <canvas id="sourceComparisonChart"></canvas>
                    </div>
                </section>
            </div>

            <div id="directory-view" style="display: none;">
                <section id="directory-table-section">
                     <h2 class="text-3xl font-bold text-center mb-4 text-[#3d405b]">Comprehensive Provider Directory</h2>
                     <p class="text-center text-gray-600 mb-8 max-w-3xl mx-auto">This directory compiles all identified resources. Use the filters to narrow your search by source category or use the search box to find specific keywords. Each source category has unique strengths for finding providers.</p>
                    <div class="bg-white p-6 rounded-xl shadow-lg">
                        <div class="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                            <div class="w-full md:w-auto flex flex-wrap gap-2 justify-center" id="filter-buttons">
                            </div>
                            <input type="text" id="searchInput" placeholder="Search directory..." class="w-full md:w-1/3 p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#81b29a] focus:outline-none">
                        </div>
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Directory Name</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Focus</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                                    </tr>
                                </thead>
                                <tbody id="directory-tbody" class="bg-white divide-y divide-gray-200">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
            </div>
            
            <div id="regional-view" style="display: none;">
                <section id="regional-analysis-section">
                    <h2 class="text-3xl font-bold text-center mb-4 text-[#3d405b]">Regional Market Analysis</h2>
                    <p class="text-center text-gray-600 mb-8 max-w-3xl mx-auto">The provider landscape varies significantly by region. Select a market below to understand its unique characteristics, level of maturity, and key resources for provider identification.</p>
                    <div class="max-w-4xl mx-auto">
                        <div id="accordion-container"></div>
                    </div>
                </section>
            </div>

        </main>
    </div>

    <script>
        const directoryData = [
            { name: "BrainMaster Practitioner Finder", url: "https://brainmaster.com/find-a-clinician/", category: "Manufacturer", focus: "Global", notes: "Ecosystem for BrainMaster hardware/software. Good for finding users of a specific platform." },
            { name: "Neuroelectrics Distributor List", url: "https://www.neuroelectrics.com/about-us/distributors", category: "Manufacturer", focus: "Global", notes: "B2B list of regional distributors, not end-user clinicians. Requires a two-step approach." },
            { name: "ANT Neuro Offices", url: "https://www.medicalexpo.com/soc/ant-neuro-84713.html", category: "Manufacturer", focus: "Global", notes: "Lists direct corporate offices in key markets (NL, DE, UK, US, HK, AU). B2B focus." },
            { name: "Medtronic Find a Specialist", url: "https://www.medtronic.com/en-us/e/locator-neuro.html", category: "Manufacturer", focus: "Global", notes: "Broad neuroscience tool. Not specific to EEG/neurofeedback; low signal-to-noise ratio." },
            { name: "ISNR Find a Provider", url: "https://isnr.org/find-a-provider", category: "Professional Society", focus: "Global", notes: "High-volume directory. Membership is open; does not certify competence. Excellent starting point." },
            { name: "ISNR Member Directory", url: "https://isnr.org/member-directory", category: "Professional Society", focus: "Global", notes: "More comprehensive than the 'Find a Provider' list. Searchable by geography and specialty." },
            { name: "BCIA Find a Practitioner", url: "https://www.bcia.org/consumers-find-a-practitioner", category: "Certification Body", focus: "Global", notes: "Gold standard for quality. Lists certified professionals (BCN) and licensure status (-L vs. -P)." },
            { name: "ANSA Find a Practitioner", url: "https://appliedneuroscience.org.au/page-65872", category: "Professional Society", focus: "Australia", notes: "Key directory for the Australian market. Advises cross-referencing with BCIA-A." },
            { name: "Foundation for Neurofeedback", url: "https://neurofeedbackfoundation.org/find-a-provider", category: "Professional Society", focus: "Global", notes: "A meta-directory; provides a valuable list of links to other society and regional directories." },
            { name: "Psychology Today (Neurofeedback)", url: "https://www.psychologytoday.com/us/therapists?category=neurofeedback", category: "Patient/Commercial", focus: "Global", notes: "Very high volume. Excellent for gauging commercial activity and market density. Self-reported quality." },
            { name: "National Neurofeedback Network", url: "https://www.nationalneurofeedbacknetwork.com/directory/", category: "Patient/Commercial", focus: "USA", notes: "High-volume, high-relevance directory specifically for US neurofeedback providers." },
            { name: "EEG Info Provider Listing", url: "http://www.eeginfo.com/directory", category: "Patient/Commercial", focus: "Global", notes: "Commercial directory linked to the Othmer Method training ecosystem. Filterable by method/equipment." },
            { name: "Applied Neuroscience Provider Maps", url: "https://appliedneuroscience.com/internatl-provider-map/", category: "Patient/Commercial", focus: "Global", notes: "Maps of providers using the company's specific NeuroGuide software and methods." },
            { name: "ClinicalTrials.gov", url: "https://clinicaltrials.gov/", category: "Academic/Research", focus: "Global", notes: "Premier source for KOLs. Searchable database of clinical trials, PIs, and institutions." },
            { name: "EU Clinical Trials Register", url: "https://www.clinicaltrialsregister.eu/", category: "Academic/Research", focus: "Europe", notes: "European equivalent of ClinicalTrials.gov. Essential for identifying European KOLs and research hubs." },
            { name: "EBRAINS Lab Visits Directory", url: "https://www.ebrains.eu/page/lab-visits-directory", category: "Academic/Research", focus: "Europe", notes: "Directory of European neuroscience labs, often listing research focus and PIs." },
            { name: "FENS NENS Directory", url: "https://www.fens.org/careers/networks/nens/nens-directory", category: "Academic/Research", focus: "Europe", notes: "Comprehensive list of European neuroscience graduate programs and schools." },
        ];

        const sourceComparisonData = [
            { label: 'Manufacturer Networks', x: 2.5, y: 3, color: '#f94144' },
            { label: 'Professional Society Rosters', x: 4, y: 3, color: '#f3722c' },
            { label: 'Certification Body (BCIA)', x: 3, y: 4.5, color: '#81b29a' },
            { label: 'Patient/Commercial Directories', x: 5, y: 2, color: '#f8961e' },
            { label: 'Academic/Research Networks', x: 1, y: 5, color: '#3d405b' },
        ];
        
        const regionalData = [
            { name: "North America", content: "The most mature, diverse, and well-documented market. All source categories are strongly represented. It hosts key bodies like ISNR and BCIA, and has robust commercial directories like Psychology Today and the National Neurofeedback Network. It's a high-volume, high-opportunity market requiring a multi-pronged search strategy." },
            { name: "United Kingdom", content: "A well-developed market with a blend of NHS involvement and a growing private sector. Major private health groups (Nuffield Health) offer EEG, and specialized clinics (Brainworks) provide innovative at-home services. Commercial directories and academic centers are strong, making it an accessible market." },
            { name: "Germany", content: "A highly organized market strongly influenced by training institutes (AfN, IFEN) and manufacturers (Mindfield). Provider networks are often built around shared educational backgrounds or technology platforms. A targeted approach focusing on local academies and manufacturers is most effective." },
            { name: "Australia", content: "A vibrant, community-driven market anchored by the Applied Neuroscience Society of Australasia (ANSA). There is a strong emphasis on quality control, with recommendations to verify credentials with BCIA-Australia. Providers clearly advertise advanced services like QEEG, indicating a mature market." },
            { name: "Scandinavian Region", content: "A more fragmented and less visible online market. Sweden is the most developed, while Denmark is less visible. Provider identification requires a bottom-up approach, focusing on regional distributors, local training affiliates, and keyword searches in local languages. A top-down search from global directories is less effective here." },
        ];

        const strategies = {
            sales: {
                title: 'Strategy: Mass-Market Sales Campaign',
                text: "To generate the largest possible list of commercially active providers, focus on maximizing reach and volume. Start with the highest-volume commercial directories like Psychology Today and the National Neurofeedback Network, as these capture providers with clear commercial intent. Supplement this list by acquiring member directories from major professional societies like ISNR to add individuals from the core professional community. This combined list is ideal for large-scale marketing campaigns and broad market-sizing analysis.",
                categories: ['Patient/Commercial', 'Professional Society']
            },
            partnership: {
                title: 'Strategy: High-Quality Partnership Development',
                text: "To identify credible and professionally active providers for partnerships, focus on quality over volume. Start with the 'gold standard' source: the BCIA provider directory, prioritizing licensed (BCN-L) professionals. Cross-reference this list against member directories of societies like ISNR to find providers who are both certified and community-engaged. A final check on commercial directories can identify those who are also growth-oriented. This yields a 'Tier 1' list of the most desirable clinical partners.",
                categories: ['Certification Body', 'Professional Society', 'Manufacturer']
            },
            research: {
                title: 'Strategy: Key Opinion Leader (KOL) Engagement',
                text: "To identify top-tier academic and clinical researchers, focus on sources that highlight innovation and scientific validation. Systematically search clinical trial registries (ClinicalTrials.gov, EU Clinical Trials Register) to find Principal Investigators and their institutions. Supplement this by identifying senior authors of highly-cited research papers on academic databases. These individuals are not sales targets; they are strategic assets for scientific advisory boards and validation studies.",
                categories: ['Academic/Research']
            }
        };

        let chart;
        let currentFilter = 'All';

        function renderTable(data) {
            const tbody = document.getElementById('directory-tbody');
            tbody.innerHTML = '';
            if (data.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center py-8 text-gray-500">No results found.</td></tr>';
                return;
            }
            data.forEach(item => {
                const row = `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <a href="${item.url}" target="_blank" rel="noopener noreferrer" class="font-medium table-link">${item.name}</a>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${item.category}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${item.focus}</td>
                        <td class="px-6 py-4 text-sm text-gray-500">${item.notes}</td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function setupFilters() {
            const categories = ['All', ...new Set(directoryData.map(item => item.category))];
            const filterContainer = document.getElementById('filter-buttons');
            filterContainer.innerHTML = '';
            categories.forEach(category => {
                const button = document.createElement('button');
                button.textContent = category;
                button.className = `filter-btn px-4 py-2 border rounded-full text-sm font-medium ${currentFilter === category ? 'active' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}`;
                button.onclick = () => {
                    currentFilter = category;
                    applyFilters();
                    updateFilterButtons();
                };
                filterContainer.appendChild(button);
            });
        }
        
        function updateFilterButtons() {
            const buttons = document.querySelectorAll('.filter-btn');
            buttons.forEach(btn => {
                if (btn.textContent === currentFilter) {
                    btn.classList.add('active');
                    btn.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                } else {
                    btn.classList.remove('active');
                    btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                }
            });
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            let filteredData = directoryData;

            if (currentFilter !== 'All') {
                filteredData = filteredData.filter(item => item.category === currentFilter);
            }

            if (searchTerm) {
                filteredData = filteredData.filter(item => 
                    Object.values(item).some(val => 
                        String(val).toLowerCase().includes(searchTerm)
                    )
                );
            }
            renderTable(filteredData);
        }

        function initChart() {
            const ctx = document.getElementById('sourceComparisonChart').getContext('2d');
            if (chart) {
                chart.destroy();
            }
            chart = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: sourceComparisonData.map(d => ({
                        label: d.label,
                        data: [{x: d.x, y: d.y}],
                        backgroundColor: d.color,
                        borderColor: d.color,
                        pointRadius: 15,
                        pointHoverRadius: 20,
                    }))
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Lead Volume Potential ‚Üí',
                                font: { size: 14 }
                            },
                            min: 0,
                            max: 5.5,
                            ticks: { display: false }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Lead Quality / Credibility ‚Üí',
                                font: { size: 14 }
                            },
                            min: 0,
                            max: 5.5,
                            ticks: { display: false }
                        }
                    },
                    onClick: (e, elements) => {
                        if (elements.length > 0) {
                            const datasetIndex = elements[0].datasetIndex;
                            const category = sourceComparisonData[datasetIndex].label;
                            if(category === 'Certification Body (BCIA)') {
                                currentFilter = 'Certification Body';
                            } else if (category === 'Professional Society Rosters') {
                                currentFilter = 'Professional Society';
                            } else {
                                currentFilter = category;
                            }
                            showView('directory');
                            applyFilters();
                            updateFilterButtons();
                        }
                    }
                }
            });
        }
        
        function setupAccordion() {
            const container = document.getElementById('accordion-container');
            container.innerHTML = '';
            regionalData.forEach((item, index) => {
                const div = document.createElement('div');
                div.className = 'border-b border-gray-200';
                div.innerHTML = `
                    <button class="w-full text-left p-4 focus:outline-none" onclick="toggleAccordion(${index})">
                        <div class="flex justify-between items-center">
                            <span class="text-lg font-semibold text-[#3d405b]">${item.name}</span>
                            <span id="accordion-icon-${index}" class="transform transition-transform duration-300">+</span>
                        </div>
                    </button>
                    <div id="accordion-content-${index}" class="max-h-0 overflow-hidden transition-max-height duration-500 ease-in-out">
                        <div class="p-4 pt-0 text-gray-600">
                            <p>${item.content}</p>
                        </div>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function toggleAccordion(index) {
            const content = document.getElementById(`accordion-content-${index}`);
            const icon = document.getElementById(`accordion-icon-${index}`);
            const isOpen = content.style.maxHeight && content.style.maxHeight !== '0px';

            if (isOpen) {
                content.style.maxHeight = '0px';
                icon.classList.remove('rotate-45');
            } else {
                content.style.maxHeight = content.scrollHeight + 'px';
                icon.classList.add('rotate-45');
            }
        }
        
        function showView(viewName) {
            document.getElementById('dashboard-view').style.display = 'none';
            document.getElementById('directory-view').style.display = 'none';
            document.getElementById('regional-view').style.display = 'none';
            
            document.getElementById(`${viewName}-view`).style.display = 'block';
            
            document.querySelectorAll('.nav-button').forEach(btn => {
                btn.classList.remove('active');
                if(btn.dataset.nav === viewName) {
                    btn.classList.add('active');
                }
            });
            document.getElementById('mobile-nav').value = viewName;
            
            if (viewName === 'directory') {
                applyFilters();
            }
        }
        
        function selectGoal(goal) {
            const strategy = strategies[goal];
            document.getElementById('strategy-title').textContent = strategy.title;
            document.getElementById('strategy-text').textContent = strategy.text;
            document.getElementById('strategy-display').style.display = 'block';

            currentFilter = 'All';
            showView('directory');
            
            const filteredData = directoryData.filter(item => strategy.categories.includes(item.category));
            renderTable(filteredData);
            
            window.scrollTo({ top: document.getElementById('directory-view').offsetTop - 80, behavior: 'smooth' });
        }
        
        function resetDashboard() {
            document.getElementById('strategy-display').style.display = 'none';
            showView('dashboard');
            currentFilter = 'All';
            applyFilters();
            updateFilterButtons();
        }

        window.onload = () => {
            renderTable(directoryData);
            setupFilters();
            initChart();
            setupAccordion();

            document.getElementById('searchInput').addEventListener('input', applyFilters);
            document.getElementById('mobile-nav').addEventListener('change', (e) => showView(e.target.value));
        };
    </script>
</body>
</html>

</code>

gemini\deep-research.html:
<code>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive TMS Lead Source Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals (Slate, Stone) with a Teal accent -->
    <!-- Application Structure Plan: A dashboard-style SPA. The core is an interactive, filterable grid of "Source Cards" derived from the report's table. This is more engaging and responsive than a static table. Key interactions include filtering by source category and strategic value, with dynamic charts providing a visual summary and enabling cross-filtering. This structure was chosen to transform the passive report into an active analysis tool, allowing a user to immediately segment and prioritize sources based on their strategic goals (e.g., find all high-quality manufacturer locators). Strategic advice from the report is placed in an accessible accordion at the end to support, but not clutter, the primary data exploration view. -->
    <!-- Visualization & Content Choices: 
        1. Report Table -> Goal: Explore/Filter Sources -> Viz: Interactive Card Grid (HTML/JS) -> Interaction: Filter buttons, search -> Justification: Modern, responsive, and allows for progressive disclosure of detailed information.
        2. Source Categories -> Goal: Compare Source Types -> Viz: Bar Chart (Chart.js) -> Interaction: Click bar to filter grid -> Justification: Standard, clear method for comparing counts. Cross-filtering creates a cohesive experience.
        3. Strategic Value (Synthesized) -> Goal: Assess Quality vs. Volume -> Viz: Donut Chart (Chart.js) -> Interaction: Hover for details -> Justification: Shows part-to-whole breakdown of source types by their strategic utility (High Quality, High Volume, etc.), providing a quick strategic overview.
        4. Strategic Recommendations -> Goal: Provide Actionable Guidance -> Viz: Accordion (HTML/JS) -> Interaction: Click to expand -> Justification: Keeps detailed text accessible but secondary to the interactive dashboard.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* slate-50 */
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 350px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
                max-height: 400px;
            }
        }
        .card-enter {
            animation: card-enter 0.5s ease-out;
        }
        @keyframes card-enter {
            from {
                opacity: 0;
                transform: scale(0.95);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
        .nav-button.active {
            background-color: #0d9488; /* teal-600 */
            color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
        }
    </style>
</head>
<body class="bg-slate-50 text-slate-800">

    <div class="container mx-auto p-4 md:p-8">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-teal-700">TMS Clinic Intelligence Dashboard</h1>
            <p class="mt-2 text-lg text-slate-600 max-w-3xl mx-auto">An interactive tool for exploring and analyzing global sources of Transcranial Magnetic Stimulation (TMS) clinic data to inform lead generation strategy.</p>
        </header>

        <main id="app">
            
            <section id="dashboard" class="mb-12">
                <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                    <h2 class="text-2xl font-bold text-slate-800 mb-4">Source Analysis Dashboard</h2>
                    <p class="text-slate-600 mb-6">
                        This dashboard visualizes the directory of digital sources for identifying TMS clinics. Use the filters to segment the data by category or strategic value. The charts provide a high-level overview and can also be used to filter the source list below. The goal is to help you quickly identify the most promising sources for your data acquisition strategy.
                    </p>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <div class="w-full">
                            <h3 class="text-xl font-semibold text-center mb-2">Sources by Category</h3>
                            <div class="chart-container">
                                <canvas id="categoryChart"></canvas>
                            </div>
                        </div>
                        <div class="w-full">
                            <h3 class="text-xl font-semibold text-center mb-2">Sources by Strategic Value</h3>
                             <div class="chart-container">
                                <canvas id="valueChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section id="interactive-directory">
                <h2 class="text-2xl font-bold text-slate-800 mb-2">Interactive Source Directory</h2>
                 <p class="text-slate-600 mb-6">
                    Here is the complete list of identified sources. Use the buttons to filter the list based on the source category. Click on any card to view detailed rationale and access the direct scraping URL. The list will dynamically update based on your selections here or in the charts above.
                </p>

                <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                    <div class="flex flex-wrap gap-2 mb-6" id="category-filters">
                        <button data-filter="All" class="nav-button active text-sm font-medium px-4 py-2 rounded-full bg-slate-100 text-slate-700 hover:bg-teal-500 hover:text-white transition-colors">All Sources</button>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="source-cards">
                    </div>
                </div>
            </section>
            
            <section id="recommendations" class="mt-12">
                 <h2 class="text-2xl font-bold text-slate-800 mb-2">Strategic Recommendations</h2>
                 <p class="text-slate-600 mb-6">
                    Based on the analysis of all sources, the following strategic conclusions and phased data acquisition plan are recommended. These sections summarize the key takeaways from the source report, providing a clear path from data intelligence to actionable lead generation.
                </p>
                <div id="accordion-container" class="space-y-4">
                </div>
            </section>

        </main>

    </div>

    <script>
        const sourceData = [
            { name: "NeuroStar Advanced Therapy", category: "Manufacturer Locator", value: "High Quality", url: "https://neurostar.com/enter-zip-code/", notes: "Highest Quality - Verified Customers. NeuroStar is a market leader in the US. Locator requires ZIP code submission to display results, so scraping requires programmatic form submission. Their pay-per-use model presents a strategic opportunity to pitch a capital-purchase tDCS device as a cost-saving alternative." },
            { name: "BrainsWay", category: "Manufacturer Locator", value: "High Quality", url: "https://www.brainsway.com/find-a-provider/", notes: "High Quality - Global Reach & Volume Indicator. Static, crawlable HTML page. Directory features tiered provider badges ('Ultra,' 'Premier,' 'Elite') which are a valuable proxy for clinic size and patient volume, allowing for immediate lead prioritization." },
            { name: "MagVenture", category: "Manufacturer Locator", value: "High Quality", url: "https://magventure.com/us/find-provider/", notes: "High Quality - Strong European/Local Presence. Based in Denmark. Data is likely loaded via JavaScript, requiring a more advanced scraper. Their customers value efficiency (e.g., Express TMS), so a tDCS pitch should emphasize operational optimization." },
            { name: "Magstim", category: "Manufacturer Locator", value: "Strategic", url: "https://www.magstim.com/provider/", notes: "High Quality - Pre-qualified Interest in tDCS. Magstim already offers tDCS solutions, making these leads pre-qualified and 'warm' to the concept. The sales conversation can focus directly on competitive advantages versus the incumbent offering." },
            { name: "Nexstim", category: "Manufacturer Locator", value: "Strategic", url: "https://www.nexstim.com/patients/users-and-locations", notes: "High Quality - Academic & High-Tech Focus. Specializes in navigated TMS (nTMS). List is heavily populated with university hospitals and advanced neuroscience institutes. Prime source for identifying Key Opinion Leaders (KOLs) and early adopters." },
            { name: "Clinical TMS Society (CTMSS)", category: "Professional Society", value: "High Quality", url: "https://clinicaltmssociety.org/find-a-tms-provider/", notes: "Highest Quality - Vendor-Agnostic Directory. Arguably the most valuable single directory. Membership signals high professional commitment. Due to its data quality and ease of scraping, this should be a top priority." },
            { name: "American Psychiatric Association", category: "Professional Society", value: "High Volume", url: "https://finder.psychiatry.org/s/", notes: "High Volume - Requires Secondary Filtering. A general directory lacking a specific 'TMS' filter. Requires a two-step process: scrape profiles, then crawl individual sites for keywords. Best for market sizing or data enrichment." },
            { name: "International Neuromodulation Society", category: "Professional Society", value: "Strategic", url: "https://www.neuromodulation.com/become-a-member", notes: "Strategic - Global KOL Identification. An umbrella organization for all neuromodulation. Scraping requires targeting decentralized chapter websites. Members are highly qualified as potential early adopters and influencers." },
            { name: "Psychology Today", category: "Health Directory", value: "High Volume", url: "https://www.psychologytoday.com/us/therapists/transcranial-magnetic-stimulation-tms", notes: "Highest Volume - Rich Profile Data. Massive patient-facing directory with direct TMS filtering. Best source for high-volume lead generation. Profiles are data-rich, allowing for deep lead qualification. Requires JS-capable scraper." },
            { name: "ClinicalTrials.gov", category: "Academic/Research", value: "Strategic", url: "https://clinicaltrials.gov/", notes: "Strategic - Directory of Innovators. Definitive global database of clinical trials. Use the public API. Locations section lists participating institutions, which are ideal targets for research collaborations and identifying key decision-makers." },
            { name: "DGHP (Germany)", category: "International Directory", value: "High Quality", url: "https://dghp-online.de/index.php/kliniken", notes: "High Quality - Essential for German Market. Provides a direct, public directory of TMS clinics in Germany and Switzerland in a clean HTML table. Critical for penetrating the German market." },
            { name: "Smart TMS (UK)", category: "International Directory", value: "Strategic", url: "https://www.smarttms.co.uk/clinics/", notes: "High Quality - UK Private Market Leader. Represents a single point of contact for a multi-location private provider. A high-value target for entering the UK private healthcare market." },
            { name: "Monarch Mental Health (Australia)", category: "International Directory", value: "Strategic", url: "https://www.mmhg.com.au/our-locations", notes: "High Quality - Major Australian Provider Network. A multi-site provider that already uses tDCS, confirming them as a highly qualified lead. Partnership could result in significant market penetration in Australia." },
            { name: "Aushealthpages", category: "International Directory", value: "High Volume", url: "https://aushealthpages.com.au/directory/categories/transcranial-magnetic-stimulation-tms", notes: "High Volume - Australian Market Aggregator. Excellent source for broad coverage of the Australian market, complementing the more targeted list from major provider networks." },
            { name: "Public Psychiatry, Denmark", category: "International Directory", value: "Strategic", url: "https://www.psykiatrien.rm.dk/", notes: "Strategic - Danish Public Sector. No single national directory. Requires a bottom-up approach of crawling regional public psychiatry websites (e.g., Region Hovedstaden, Midtjylland, Sj√¶lland) for TMS-related pages." },
            { name: "Nexstim Users (Scandinavia)", category: "International Directory", value: "Strategic", url: "https://www.nexstim.com/patients/users-and-locations", notes: "High Quality - Scandinavian Academic Centers. The global Nexstim list is valuable for identifying top academic medical centers in the Scandinavian region, which are likely hubs for neuromodulation research." }
        ];

        const recommendationData = [
            {
                title: "Core Strategic Conclusion",
                content: "The analysis reveals a clear trade-off between data quality and data volume. For the **highest quality leads**, focus on **Manufacturer Locators** and **Professional Societies**. These sources provide verified, active, and engaged TMS clinics. For the **largest volume of leads** and comprehensive market mapping, the **Large-Scale Health Directories** like Psychology Today are unparalleled, though they may require more sophisticated scraping techniques."
            },
            {
                title: "Phase 1: Core Database Construction",
                content: "Begin by scraping the highest-quality, most easily accessible sources. This includes the directories from the **Clinical TMS Society (CTMSS)**, **BrainsWay**, and **Magstim**. This will rapidly generate a core database of several hundred highly qualified, verified leads with minimal technical overhead."
            },
            {
                title: "Phase 2: High-Volume Expansion & Enrichment",
                content: "Deploy a more sophisticated, JavaScript-enabled scraping effort on **Psychology Today** to massively expand the database. The rich data from these profiles should be used to enrich the core leads from Phase 1. Concurrently, execute the programmatic, form-submitting scrape of the **NeuroStar** locator to capture their extensive and valuable US network."
            },
            {
                title: "Phase 3: Strategic & International Targeting",
                content: "Conduct targeted scraping campaigns on identified international and academic sources. This includes the **DGHP** directory for Germany, **MMHG** and **Aushealthpages** for Australia, and UK targets. Systematically extract location data from the **ClinicalTrials.gov API**. The Scandinavian market will require a manual, 'bottom-up' approach of crawling specific regional health authority websites. This phase is about securing strategic footholds and building relationships with global innovators."
            }
        ];

        let categoryChart, valueChart;
        let currentFilter = 'All';

        document.addEventListener('DOMContentLoaded', () => {
            const categoryFiltersContainer = document.getElementById('category-filters');
            const sourceCardsContainer = document.getElementById('source-cards');
            const accordionContainer = document.getElementById('accordion-container');
            
            const categories = [...new Set(sourceData.map(d => d.category))];
            
            categories.forEach(category => {
                const button = document.createElement('button');
                button.dataset.filter = category;
                button.className = 'nav-button text-sm font-medium px-4 py-2 rounded-full bg-slate-100 text-slate-700 hover:bg-teal-500 hover:text-white transition-colors';
                button.textContent = category;
                categoryFiltersContainer.appendChild(button);
            });

            categoryFiltersContainer.addEventListener('click', (e) => {
                if (e.target.tagName === 'BUTTON') {
                    currentFilter = e.target.dataset.filter;
                    updateActiveButton(e.target);
                    renderSourceCards();
                    highlightChartSelection(categoryChart, currentFilter);
                }
            });

            recommendationData.forEach((item, index) => {
                const accItem = document.createElement('div');
                accItem.className = 'bg-white border border-slate-200 rounded-lg shadow-sm';
                accItem.innerHTML = `
                    <button class="accordion-toggle w-full flex justify-between items-center text-left p-4 font-semibold text-slate-700 hover:bg-slate-50">
                        <span>${item.title}</span>
                        <span class="transform transition-transform duration-300">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                        </span>
                    </button>
                    <div class="accordion-content">
                        <p class="p-4 pt-0 text-slate-600">${item.content}</p>
                    </div>
                `;
                accordionContainer.appendChild(accItem);
            });

            accordionContainer.addEventListener('click', (e) => {
                const toggle = e.target.closest('.accordion-toggle');
                if (toggle) {
                    const content = toggle.nextElementSibling;
                    const icon = toggle.querySelector('span:last-child');
                    
                    if (content.style.maxHeight) {
                        content.style.maxHeight = null;
                        icon.classList.remove('rotate-180');
                    } else {
                        document.querySelectorAll('.accordion-content').forEach(el => el.style.maxHeight = null);
                        document.querySelectorAll('.accordion-toggle span:last-child').forEach(el => el.classList.remove('rotate-180'));
                        content.style.maxHeight = content.scrollHeight + "px";
                        icon.classList.add('rotate-180');
                    }
                }
            });

            renderCharts();
            renderSourceCards();
        });

        function updateActiveButton(activeButton) {
            document.querySelectorAll('#category-filters .nav-button').forEach(btn => {
                btn.classList.remove('active');
            });
            activeButton.classList.add('active');
        }

        function renderSourceCards() {
            const container = document.getElementById('source-cards');
            container.innerHTML = '';
            const filteredData = sourceData.filter(d => currentFilter === 'All' || d.category === currentFilter);
            
            if (filteredData.length === 0) {
                container.innerHTML = `<p class="text-slate-500 col-span-full text-center">No sources found for this category.</p>`;
                return;
            }

            filteredData.forEach(d => {
                const card = document.createElement('div');
                card.className = 'card-enter bg-slate-50/50 border border-slate-200 rounded-lg p-5 flex flex-col justify-between hover:shadow-lg hover:border-teal-300 transition-all duration-300';
                card.innerHTML = `
                    <div>
                        <span class="inline-block bg-${d.value === 'High Quality' ? 'green' : d.value === 'High Volume' ? 'blue' : 'purple'}-100 text-${d.value === 'High Quality' ? 'green' : d.value === 'High Volume' ? 'blue' : 'purple'}-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded-full">${d.value}</span>
                        <h3 class="font-bold text-lg mt-2 text-slate-800">${d.name}</h3>
                        <p class="text-sm text-slate-500 mb-3">${d.category}</p>
                        <p class="text-slate-600 text-sm">${d.notes}</p>
                    </div>
                    <a href="${d.url}" target="_blank" rel="noopener noreferrer" class="mt-4 inline-block text-center w-full bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-teal-700 transition-colors">
                        Go to Source 
                        <span class="ml-1">&#8599;</span>
                    </a>
                `;
                container.appendChild(card);
            });
        }

        function renderCharts() {
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            const valueCtx = document.getElementById('valueChart').getContext('2d');

            const categoryCounts = sourceData.reduce((acc, d) => {
                acc[d.category] = (acc[d.category] || 0) + 1;
                return acc;
            }, {});

            const valueCounts = sourceData.reduce((acc, d) => {
                acc[d.value] = (acc[d.value] || 0) + 1;
                return acc;
            }, {});
            
            const chartColors = {
                teal: 'rgba(13, 148, 136, 0.6)',
                teal_border: 'rgba(13, 148, 136, 1)',
                purple: 'rgba(147, 112, 219, 0.6)',
                purple_border: 'rgba(147, 112, 219, 1)',
                green: 'rgba(16, 185, 129, 0.6)',
                green_border: 'rgba(16, 185, 129, 1)',
                blue: 'rgba(59, 130, 246, 0.6)',
                blue_border: 'rgba(59, 130, 246, 1)',
                slate: 'rgba(100, 116, 139, 0.6)',
                slate_border: 'rgba(100, 116, 139, 1)'
            };
            
            const valueColorMap = {
                'High Quality': { bg: chartColors.green, border: chartColors.green_border },
                'High Volume': { bg: chartColors.blue, border: chartColors.blue_border },
                'Strategic': { bg: chartColors.purple, border: chartColors.purple_border },
            };

            categoryChart = new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(categoryCounts),
                    datasets: [{
                        label: '# of Sources',
                        data: Object.values(categoryCounts),
                        backgroundColor: chartColors.teal,
                        borderColor: chartColors.teal_border,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    scales: {
                        x: { beginAtZero: true, grid: { display: false } },
                        y: { grid: { display: true, color: '#e2e8f0' } }
                    },
                    plugins: { legend: { display: false } },
                    onClick: (e) => {
                        const activePoints = categoryChart.getElementsAtEventForMode(e, 'nearest', { intersect: true }, true);
                        if (activePoints.length) {
                            const firstPoint = activePoints[0];
                            const label = categoryChart.data.labels[firstPoint.index];
                            currentFilter = label;
                            const activeButton = document.querySelector(`#category-filters button[data-filter="${label}"]`);
                            updateActiveButton(activeButton);
                            renderSourceCards();
                        }
                    }
                }
            });

            valueChart = new Chart(valueCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(valueCounts),
                    datasets: [{
                        label: 'Strategic Value',
                        data: Object.values(valueCounts),
                        backgroundColor: Object.keys(valueCounts).map(v => valueColorMap[v].bg),
                        borderColor: Object.keys(valueCounts).map(v => valueColorMap[v].border),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }
        
        function highlightChartSelection(chart, label) {
            const backgroundColors = chart.data.datasets[0].backgroundColor;
            const borderColors = chart.data.datasets[0].borderColor;

            const newBgs = [];
            const newBorders = [];

            chart.data.labels.forEach((l, i) => {
                if (label === 'All' || l === label) {
                    newBgs[i] = chartColors.teal;
                    newBorders[i] = chartColors.teal_border;
                } else {
                    newBgs[i] = chartColors.slate;
                    newBorders[i] = chartColors.slate_border;
                }
            });

            chart.data.datasets[0].backgroundColor = newBgs;
            chart.data.datasets[0].borderColor = newBorders;
            chart.update();
        }

    </script>

</body>
</html>

</code>

platoscience\platoscience\data-sources\scripts\clean_brainsway.py:
<code>
import json
import re
import os

# Get the absolute path of the directory where this script is located.
# __file__ is a special variable that holds the path to the current script.
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Define the full, absolute paths for the input and output files.
# This ensures the script always looks for 'brainsway.json' in its own folder.
INPUT_FILENAME = os.path.join(SCRIPT_DIR, 'brainsway.json')
OUTPUT_FILENAME = os.path.join(SCRIPT_DIR, 'brainsway_cleaned.json')

def clean_data(data):
    """
    This function takes a list of scraped items (dictionaries) and
    applies cleaning logic to each one.
    """
    cleaned_data = []
    
    # Loop through every item (clinic) in the list
    for item in data:
        # --- Task 1: Clean and Standardize Phone Numbers ---
        cleaned_phone = None
        if item.get('detailed_phone'):
            phone_number = item['detailed_phone']
            # This strips out anything that is not a digit.
            cleaned_phone = re.sub(r'\D', '', phone_number)
        
        # --- Task 2: Infer Country ---
        inferred_country = None
        if item.get('detailed_address'):
            address_string = item['detailed_address']
            
            # We create a list of countries to look for in the address string.
            known_countries = [
                'United States', 'USA', 'United Kingdom', 'UK', 'Canada', 
                'Australia', 'Germany', 'France', 'Spain', 'Italy', 'Ukraine',
                'Mexico', 'Brazil', 'India', 'Thailand', 'Turkey'
                # You can add more countries to this list as you scrape new sites
            ]
            
            for country in known_countries:
                # We use a case-insensitive search to find the country name
                if re.search(r'\b' + re.escape(country) + r'\b', address_string, re.IGNORECASE):
                    # Standardize the name (e.g., "USA" becomes "United States")
                    if country in ['USA', 'United States']:
                        inferred_country = 'United States'
                    elif country in ['UK', 'United Kingdom']:
                        inferred_country = 'United Kingdom'
                    else:
                        inferred_country = country
                    break # Stop searching once we've found a country

        # --- Task 3: Build the final, filtered dictionary ---
        # Create a new dictionary containing only the fields we want.
        final_item = {
            'source_url': item.get('source_url'),
            'name': item.get('name'),
            'phone': cleaned_phone,
            'website_link': item.get('website_link'),
            'country': inferred_country
        }

        cleaned_data.append(final_item)
        
    return cleaned_data

def main():
    """
    Main function to run the data cleaning process.
    """
    try:
        # Open the raw JSON file and load the data into a Python list
        with open(INPUT_FILENAME, 'r', encoding='utf-8') as f:
            print(f"Reading data from '{INPUT_FILENAME}'...")
            raw_data = json.load(f)
        
        print(f"Successfully loaded {len(raw_data)} records.")

        # Run the cleaning function on the loaded data
        print("Cleaning data...")
        processed_data = clean_data(raw_data)
        print("Cleaning complete.")

        # Open the new output file and save the cleaned data
        # 'indent=4' makes the new JSON file nicely formatted and easy to read
        with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as f:
            print(f"Saving cleaned data to '{OUTPUT_FILENAME}'...")
            json.dump(processed_data, f, indent=4)
        
        print("Process finished successfully!")

    except FileNotFoundError:
        print(f"ERROR: The file '{INPUT_FILENAME}' was not found.")
        print("Please make sure the script and the JSON file are in the same folder.")
    except json.JSONDecodeError:
        print(f"ERROR: Could not read the data from '{INPUT_FILENAME}'. It might not be a valid JSON file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# This makes the script runnable from the command line
if __name__ == '__main__':
    main()

</code>

platoscience\platoscience\data-sources\scripts\dashboard.html:
<code>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lead Generation Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .table-scrollbar::-webkit-scrollbar { width: 5px; height: 5px; }
        .table-scrollbar::-webkit-scrollbar-thumb { background-color: #a0aec0; border-radius: 10px; }
        .table-scrollbar::-webkit-scrollbar-track { background-color: #edf2f7; }
        .stat-card {
            transition: transform 0.2s ease-in-out;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .sortable:hover {
            cursor: pointer;
            background-color: #f0f4f8;
        }
        .pagination-btn {
            @apply inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900">Platoscience Lead Dashboard</h1>
            <p class="text-lg text-gray-600">Clinics providing TMS</p>
        </header>

        <!-- File Upload Section -->
        <div class="bg-white p-4 rounded-lg shadow-md mb-6">
            <label for="jsonUpload" class="block text-sm font-medium text-gray-700 mb-2">Load Clinic Data:</label>
            <input type="file" id="jsonUpload" accept=".json" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
            <p id="file-upload-status" class="text-sm text-gray-500 mt-2"></p>
        </div>

        <!-- Statistics Section -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
            <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                <h3 class="text-gray-500 text-sm font-medium">Total Leads</h3>
                <p id="totalLeadsStat" class="text-3xl font-bold text-gray-900">0</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                <h3 class="text-gray-500 text-sm font-medium">Leads with Email</h3>
                <p id="emailLeadsStat" class="text-3xl font-bold text-green-600">0</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                <h3 class="text-gray-500 text-sm font-medium">Leads with Phone</h3>
                <p id="phoneLeadsStat" class="text-3xl font-bold text-blue-600">0</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                <h3 class="text-gray-500 text-sm font-medium">Countries Represented</h3>
                <p id="countryCountStat" class="text-3xl font-bold text-purple-600">0</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                <h3 id="continentLeadsTitle" class="text-gray-500 text-sm font-medium">Leads in Continent</h3>
                <p id="continentLeadsStat" class="text-3xl font-bold text-orange-600">N/A</p>
            </div>
        </div>

        <!-- Filter and Search Controls -->
        <div class="bg-white p-4 rounded-lg shadow-md mb-6 flex flex-col md:flex-row gap-4 items-center flex-wrap">
            <div class="relative flex-grow w-full sm:w-auto">
                <input type="text" id="searchInput" placeholder="Search by name, country, or city..."
                       class="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <svg class="w-5 h-5 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
            </div>
             <select id="continentFilter" class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">All Continents</option>
            </select>
            <select id="countryFilter" class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">All Countries</option>
            </select>
            <select id="contactFilter" class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">All Contacts</option>
                <option value="phoneAndEmail">Has Phone & Email</option>
                <option value="phoneOnly">Has Phone</option>
                <option value="emailOnly">Has Email</option>
            </select>
            <div class="text-right text-gray-600 font-medium w-full sm:w-auto sm:ml-auto">
                <span id="clinicCount">0</span> clinics found
            </div>
        </div>

        <!-- Main Table -->
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="overflow-x-auto table-scrollbar">
                <table class="w-full text-left">
                    <thead class="bg-gray-50 border-b border-gray-200">
                        <tr>
                            <th class="p-4 font-semibold sortable" data-sort="name">Name</th>
                            <th class="p-4 font-semibold sortable" data-sort="country">Location</th>
                            <th class="p-4 font-semibold">Contact</th>
                            <th class="p-4 font-semibold sortable" data-sort="score">Lead Score</th>
                            <th class="p-4 font-semibold">Source</th>
                            <th class="p-4 font-semibold">Status</th>
                        </tr>
                    </thead>
                    <tbody id="clinicTableBody">
                        <tr><td colspan="6" class="p-4 text-center text-gray-500">Please upload your 'master_clinic_list.json' file to begin.</td></tr>
                    </tbody>
                </table>
            </div>
             <!-- Pagination Controls -->
            <div id="paginationControls" class="p-4 flex items-center justify-between border-t border-gray-200">
                <!-- Will be populated by JS -->
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tableBody = document.getElementById('clinicTableBody');
            const searchInput = document.getElementById('searchInput');
            const countryFilter = document.getElementById('countryFilter');
            const continentFilter = document.getElementById('continentFilter');
            const contactFilter = document.getElementById('contactFilter');
            const clinicCount = document.getElementById('clinicCount');
            const jsonUpload = document.getElementById('jsonUpload');
            const uploadStatus = document.getElementById('file-upload-status');
            const paginationControls = document.getElementById('paginationControls');

            const totalLeadsStat = document.getElementById('totalLeadsStat');
            const emailLeadsStat = document.getElementById('emailLeadsStat');
            const phoneLeadsStat = document.getElementById('phoneLeadsStat');
            const countryCountStat = document.getElementById('countryCountStat');
            const continentLeadsStat = document.getElementById('continentLeadsStat');
            const continentLeadsTitle = document.getElementById('continentLeadsTitle');

            let allClinics = [];
            let filteredClinics = [];
            let leadStatuses = {};
            let currentSort = { key: 'score', direction: 'desc' };
            let currentPage = 1;
            const rowsPerPage = 20;

            const countryToContinent = {
                'USA': 'North America', 'United States': 'North America', 'Canada': 'North America', 'Mexico': 'North America',
                'Germany': 'Europe', 'United Kingdom': 'Europe', 'France': 'Europe', 'Italy': 'Europe', 'Spain': 'Europe', 'Switzerland': 'Europe', 'Austria': 'Europe', 'Belgium': 'Europe', 'Netherlands': 'Europe', 'Sweden': 'Europe', 'Norway': 'Europe', 'Denmark': 'Europe', 'Finland': 'Europe', 'Ireland': 'Europe', 'Portugal': 'Europe', 'Greece': 'Europe', 'Poland': 'Europe', 'Hungary': 'Europe', 'Croatia': 'Europe', 'Ukraine': 'Europe',
                'Australia': 'Oceania',
                'Japan': 'Asia', 'Israel': 'Asia', 'Turkey': 'Asia', 'Thailand': 'Asia', 'Taiwan': 'Asia', 'Hong Kong': 'Asia', 'Singapore': 'Asia', 'India': 'Asia', 'Philippines': 'Asia', 'Nepal': 'Asia',
                'South Africa': 'Africa',
                'Brazil': 'South America', 'Ecuador': 'South America', 'Chile': 'South America', 'Peru': 'South America', 'Paraguay': 'South America'
            };

            function handleFileUpload(event) {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        allClinics = JSON.parse(e.target.result);
                        allClinics.forEach(c => {
                           c.continent = countryToContinent[c.country] || 'Other';
                        });
                        uploadStatus.textContent = `Successfully loaded ${allClinics.length} clinics from ${file.name}.`;
                        uploadStatus.className = 'text-sm text-green-600 mt-2';
                        loadStatuses();
                        populateContinentFilter();
                        populateCountryFilter();
                        updateStatistics();
                        filterData();
                    } catch (error) {
                        uploadStatus.textContent = `Error parsing JSON file: ${error.message}`;
                        uploadStatus.className = 'text-sm text-red-600 mt-2';
                    }
                };
                reader.readAsText(file);
            }
            /*             * Calculate lead score based on email, phone, and website presence.
             * Adjust scoring logic as needed.
             */
            function calculateLeadScore(clinic) {
                
                let score = 0;
                if (clinic.email) score += 3;
                if (clinic.phone) score += 2;
                if (clinic.website && clinic.website !== '#') score += 1;
                return score;
            }

            function updateStatistics() {
                totalLeadsStat.textContent = allClinics.length;
                emailLeadsStat.textContent = allClinics.filter(c => c.email).length;
                phoneLeadsStat.textContent = allClinics.filter(c => c.phone).length;
                countryCountStat.textContent = [...new Set(allClinics.map(c => c.country).filter(c => c && c !== 'N/A'))].length;
            }

            function populateContinentFilter() {
                continentFilter.innerHTML = '<option value="">All Continents</option>';
                const continents = [...new Set(allClinics.map(c => c.continent))].sort();
                continents.forEach(continent => {
                    const option = document.createElement('option');
                    option.value = continent;
                    option.textContent = continent;
                    continentFilter.appendChild(option);
                });
            }

            function populateCountryFilter(selectedContinent = '') {
                countryFilter.innerHTML = '<option value="">All Countries</option>';
                const countries = [...new Set(allClinics
                    .filter(c => selectedContinent ? c.continent === selectedContinent : true)
                    .map(c => c.country)
                    .filter(Boolean))]
                    .sort();
                
                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country;
                    option.textContent = country;
                    countryFilter.appendChild(option);
                });
            }

            function renderTable() {
    tableBody.innerHTML = '';
    
    const scoredClinics = filteredClinics.map(clinic => ({...clinic, score: calculateLeadScore(clinic)}));
    
    scoredClinics.sort((a, b) => {
        const valA = a[currentSort.key];
        const valB = b[currentSort.key];
        let comparison = 0;
        if (valA > valB) {
            comparison = 1;
        } else if (valA < valB) {
            comparison = -1;
        }
        return currentSort.direction === 'asc' ? comparison : -comparison;
    });

    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const paginatedClinics = scoredClinics.slice(startIndex, endIndex);
    
    if (paginatedClinics.length === 0 && currentPage === 1) {
        tableBody.innerHTML = '<tr><td colspan="6" class="p-4 text-center text-gray-500">No clinics match your search.</td></tr>';
    }

    paginatedClinics.forEach((clinic) => {
        const status = leadStatuses[clinic.name] || 'New';
        const sanitizedName = (clinic.name || '').replace(/["‚Äú‚Äù]/g, '&quot;').replace(/'/g, '&#39;');

        // Helper constants to clean up data before rendering
        const clinicAddress = clinic.address && clinic.address !== 'N/A' ? clinic.address : '';
        const clinicCity = clinic.city && clinic.city !== 'N/A' ? clinic.city : '';
        const clinicCountry = clinic.country && clinic.country !== 'N/A' ? clinic.country : '';
        const clinicWebsite = clinic.website && clinic.website !== '#' ? clinic.website : '';

        const row = `
            <tr class="border-b border-gray-200 hover:bg-gray-50">
                <td class="p-4 align-top max-w-xs">
                    <div class="font-bold text-gray-900 truncate" title="${clinic.name}">${clinic.name}</div>
                    ${clinicWebsite ? `<a href="${clinicWebsite}" target="_blank" class="text-blue-600 hover:underline text-sm truncate block" title="${clinicWebsite}">${clinicWebsite}</a>` : ''}
                </td>
                <td class="p-4 align-top text-sm text-gray-600 max-w-sm">
                    <div class="truncate" title="${clinicAddress}">${clinicAddress}</div>
                    <span class="font-medium">${clinicCity ? `${clinicCity}, ` : ''}${clinicCountry}</span>
                </td>
                <td class="p-4 align-top text-sm max-w-xs">
                    ${clinic.email ? `<div class="truncate" title="${clinic.email}"><a href="mailto:${clinic.email}" class="text-blue-600 hover:underline">${clinic.email}</a></div>` : ''}
${clinic.phone ? `<a href="tel:${formatPhoneNumber(clinic.phone, clinic.country)}" class="text-blue-600 hover:underline">${formatPhoneNumber(clinic.phone, clinic.country)}</a>` : ''}                </td>
                <td class="p-4 align-top text-center font-bold text-lg ${clinic.score > 4 ? 'text-green-600' : clinic.score > 2 ? 'text-yellow-600' : 'text-red-600'}">${clinic.score}</td>
                <td class="p-4 align-top text-sm text-gray-500">${clinic.source}</td>
                <td class="p-4 align-top">
                    <select class="status-dropdown p-2 border border-gray-300 rounded-md" data-clinic-name="${sanitizedName}">
                        <option value="New" ${status === 'New' ? 'selected' : ''}>New</option>
                        <option value="Contacted" ${status === 'Contacted' ? 'selected' : ''}>Contacted</option>
                        <option value="Engaged" ${status === 'Engaged' ? 'selected' : ''}>Engaged</option>
                        <option value="Qualified" ${status === 'Qualified' ? 'selected' : ''}>Qualified</option>
                        <option value="Not a Fit" ${status === 'Not a Fit' ? 'selected' : ''}>Not a Fit</option>
                    </select>
                </td>
            </tr>
        `;
        tableBody.innerHTML += row;
    });
    
    clinicCount.textContent = filteredClinics.length;
    renderPaginationControls(filteredClinics.length);
    addStatusListeners();
}

            function renderPaginationControls(totalItems) {
                paginationControls.innerHTML = '';
                const totalPages = Math.ceil(totalItems / rowsPerPage);
                if (totalPages <= 1) return;

                const startItem = (currentPage - 1) * rowsPerPage + 1;
                const endItem = Math.min(currentPage * rowsPerPage, totalItems);

                const summary = document.createElement('p');
                summary.className = 'text-sm text-gray-700';
                summary.textContent = `Showing ${startItem} to ${endItem} of ${totalItems} results`;

                const buttonsDiv = document.createElement('div');
                buttonsDiv.className = 'flex gap-2';

                const prevButton = document.createElement('button');
                prevButton.textContent = 'Previous';
                prevButton.className = 'pagination-btn';
                prevButton.disabled = currentPage === 1;
                prevButton.addEventListener('click', () => {
                    currentPage--;
                    renderTable();
                });

                const nextButton = document.createElement('button');
                nextButton.textContent = 'Next';
                nextButton.className = 'pagination-btn';
                nextButton.disabled = currentPage === totalPages;
                nextButton.addEventListener('click', () => {
                    currentPage++;
                    renderTable();
                });
                
                buttonsDiv.appendChild(prevButton);
                buttonsDiv.appendChild(nextButton);
                paginationControls.appendChild(summary);
                paginationControls.appendChild(buttonsDiv);
            }
            
            function filterData() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedCountry = countryFilter.value;
                const selectedContinent = continentFilter.value;
                const selectedContact = contactFilter.value;

                filteredClinics = allClinics.filter(clinic => {
                    const matchesSearch = (
                        clinic.name.toLowerCase().includes(searchTerm) ||
                        (clinic.country && clinic.country.toLowerCase().includes(searchTerm)) ||
                        (clinic.city && clinic.city.toLowerCase().includes(searchTerm))
                    );
                    const matchesContinent = selectedContinent ? clinic.continent === selectedContinent : true;
                    const matchesCountry = selectedCountry ? clinic.country === selectedCountry : true;
                    const matchesContact = (
                        !selectedContact ||
                        (selectedContact === 'phoneAndEmail' && clinic.phone && clinic.email) ||
                        (selectedContact === 'phoneOnly' && clinic.phone) ||
                        (selectedContact === 'emailOnly' && clinic.email)
                    );
                    return matchesSearch && matchesContinent && matchesCountry && matchesContact;
                });
                
                currentPage = 1;

                if (selectedContinent) {
                    continentLeadsTitle.textContent = `Leads in ${selectedContinent}`;
                    const continentCount = allClinics.filter(c => c.continent === selectedContinent).length;
                    continentLeadsStat.textContent = continentCount;
                } else {
                    continentLeadsTitle.textContent = 'Leads in Continent';
                    continentLeadsStat.textContent = 'N/A';
                }

                renderTable();
            }

            function saveStatus(clinicName, status) {
                leadStatuses[clinicName] = status;
                localStorage.setItem('leadStatuses', JSON.stringify(leadStatuses));
            }

            function loadStatuses() {
                const saved = localStorage.getItem('leadStatuses');
                if (saved) {
                    leadStatuses = JSON.parse(saved);
                }
            }
            
            function addStatusListeners() {
                document.querySelectorAll('.status-dropdown').forEach(dropdown => {
                    dropdown.addEventListener('change', (e) => {
                        const clinicName = e.target.dataset.clinicName;
                        const newStatus = e.target.value;
                        saveStatus(clinicName, newStatus);
                    });
                });
            }

            function handleSort(e) {
                const key = e.target.dataset.sort;
                if (currentSort.key === key) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.key = key;
                    currentSort.direction = 'asc';
                }
                renderTable();
            }

            searchInput.addEventListener('input', filterData);
            countryFilter.addEventListener('change', filterData);
            continentFilter.addEventListener('change', (e) => {
                populateCountryFilter(e.target.value);
                filterData();
            });
            contactFilter.addEventListener('change', filterData);
            jsonUpload.addEventListener('change', handleFileUpload);
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', handleSort);
            });
        });

        const countryDialingCodes = {
    // North America
    'USA': '1',
    'United States': '1',
    'Canada': '1',
    'Mexico': '52',
    // Europe
    'Germany': '49',
    'United Kingdom': '44',
    'France': '33',
    'Italy': '39',
    'Spain': '34',
    'Switzerland': '41',
    'Austria': '43',
    'Belgium': '32',
    'Netherlands': '31',
    'Sweden': '46',
    'Norway': '47',
    'Denmark': '45',
    'Finland': '358',
    'Ireland': '353',
    'Portugal': '351',
    'Greece': '30',
    'Poland': '48',
    'Hungary': '36',
    'Croatia': '385',
    'Ukraine': '380',
    // Oceania
    'Australia': '61',
    'New Zealand': '64',
    // Asia
    'Japan': '81',
    'Israel': '972', 'Turkey': '90', 'Thailand': '66', 'Taiwan': '886','Hong Kong': '852',
    'Singapore': '65', 'India': '91',
    'Philippines': '63','Nepal': '977',

    // Africa
    'South Africa': '27',
    // South America
    'Brazil': '55','Ecuador': '593','Chile': '56','Peru': '51','Paraguay': '595'
};

    function formatPhoneNumber(phoneStr, country) {
    // 1. If there's no phone number, return an empty string.
    if (!phoneStr) return '';
    // 2. Clean the number, removing all spaces, parentheses, dashes, etc.
    const cleaned = ('' + phoneStr).replace(/\D/g, '');
    if (cleaned === '') return '';
    // 3. Look up the country's dialing code.
    const code = countryDialingCodes[country];
    // 4. If we don't know the country, we can't do much. Just return the cleaned number.
    if (!code) {
        return cleaned;
    }
    // 5. If the number already starts with the correct country code, just add a '+'
    if (cleaned.startsWith(code)) {
        return `+${cleaned}`;
    }
    // 6. Special case for US numbers that might be missing the leading '1'
    if (code === '1' && cleaned.length === 10) {
        return `+1${cleaned}`;
    }
    // 7. For all other cases, prepend the code and the '+'
    return `+${code}${cleaned}`;
}
    </script>
</body>
</html>

</code>

platoscience\platoscience\data-sources\scripts\data_processing.py:
<code>
import json
import os
import re

def clean_phone_number(phone):
    """Removes non-numeric characters from a phone number."""
    if not phone:
        return None
    return re.sub(r'\D', '', str(phone))

def clean_email(email):
    """Cleans common issues from scraped email addresses."""
    if not email:
        return None
    # Remove mailto: prefix and any URL parameters
    email = email.lower().replace('mailto:', '').split('?')[0]
    # Simple regex to validate email format
    if re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return email
    return None

def process_files(file_paths):
    """
    Reads multiple JSON files, merges the data, cleans it,
    and removes duplicates.
    """
    all_clinics = []
    seen_clinics = set()

    for file_path in file_paths:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for item in data:
                    # --- Normalize fields ---
                    # Different files might use different keys for the same data.
                    name = item.get('name') or item.get('clinic_name')
                    address = item.get('address') or item.get('detailed_address')
                    phone = item.get('phone_number') or item.get('detailed_phone')
                    email = item.get('email')
                    website = item.get('website') or item.get('website_link')
                    country = item.get('country')
                    city = item.get('city')
                    
                    if not name:
                        continue

                    # --- Clean data ---
                    cleaned_phone = clean_phone_number(phone)
                    cleaned_email = clean_email(email)
                    
                    # --- Create a unique identifier to spot duplicates ---
                    # A combination of name and website is a good unique key.
                    unique_id = (name.strip().lower(), website.strip().lower() if website else "")
                    
                    if unique_id not in seen_clinics:
                        all_clinics.append({
                            'name': name.strip(),
                            'address': address.strip() if address else 'N/A',
                            'city': city.strip() if city else 'N/A',
                            'country': country.strip() if country else 'N/A',
                            'phone': cleaned_phone,
                            'email': cleaned_email,
                            'website': website.strip() if website else '#',
                            'source': os.path.basename(file_path)
                        })
                        seen_clinics.add(unique_id)
        except (json.JSONDecodeError, IOError) as e:
            print(f"Could not read or parse {file_path}: {e}")

    return all_clinics

if __name__ == '__main__':
    # Define the directory where your raw JSON files are stored.
    # Make sure to use the correct path for your system.
    data_directory = '/Users/davidolsen/Documents/repositories/Repositories/web-scraping/platoscience/platoscience/data-sources/raw-data'

    # Automatically find all .json files in the specified directory.
    files_to_process = [
        os.path.join(data_directory, f) 
        for f in os.listdir(data_directory) 
        if f.endswith('.json')
    ]
    
    if not files_to_process:
        print(f"No JSON files found in the directory: {data_directory}")
    else:
        print(f"Found {len(files_to_process)} JSON files to process...")
        # Process the files
        master_list = process_files(files_to_process)

        # Save the clean, merged data to a new file in the parent directory
        output_filename = 'master_clinic_list-new.json'
        with open(output_filename, 'w', encoding='utf-8') as f:
            # ensure_ascii=False will write the characters directly instead of escaping them.
            json.dump(master_list, f, indent=4, ensure_ascii=False)

        print(f"Processing complete. Found {len(master_list)} unique clinics.")
        print(f"Master list saved to '{output_filename}'")

</code>

platoscience\platoscience\spiders\brainsway.py:
<code>
# brainsway.py

import scrapy
from twisted.internet.error import DNSLookupError, TimeoutError, TCPTimedOutError
from scrapy.spidermiddlewares.httperror import HttpError
from scrapy.loader import ItemLoader
from ..items import ProviderItem # Import our new item

class BrainswaySpider(scrapy.Spider):
    """
    A Scrapy spider to crawl https://www.brainsway.com/find-a-provider/.
    It uses an ItemLoader to structure and clean the scraped data.
    """
    name = 'brainsway'
    start_urls = ['https://www.brainsway.com/find-a-provider/']

    def parse(self, response):
        self.log(f'Successfully fetched: {response.url}')
        provider_links = response.css('ul.columns.max-3-columns a::attr(href)').getall()
        if not provider_links:
            self.log("Could not find any provider links.")
            return
        for link in provider_links:
            yield response.follow(url=link, callback=self.parse_provider_page)

    def parse_provider_page(self, response):
        """
        Gathers initial provider details and passes an ItemLoader
        to the next request.
        """
        self.log(f"Scraping initial details from: {response.url}")
        website_link = response.css('div.location-contact-website a::attr(href)').get()
        if not website_link:
            self.log(f"No website link found for {response.url}. Skipping.")
            return
            
        # 1. Create the ItemLoader, linking it to our ProviderItem
        loader = ItemLoader(item=ProviderItem(), response=response)

        # 2. Add data using CSS selectors. No more .get() or .strip() needed!
        # The processors in items.py handle that automatically.
        loader.add_value('source_url', response.url)
        loader.add_css('name', 'h1::text')
        loader.add_css('phone', 'div.location-contact-phone a::text')
        loader.add_css('email', 'div.location-contact-email p::text')
        loader.add_value('website_link', website_link)

        # 3. Pass the loader object in the meta dict
        yield scrapy.Request(
            url=website_link,
            callback=self.parse_external_website,
            errback=self.handle_error,
            meta={'loader': loader} # Pass the whole loader
        )

    def parse_external_website(self, response):
        """
        Parses the external site, finds keywords for tags, and looks
        for a link to an "About Us" page anywhere on the page.
        """
        loader = response.meta['loader']
        loader.response = response
        self.log(f"Processing external site: {loader.get_output_value('website_link')}")

        body_text = ' '.join(response.xpath('//body//text()').getall()).lower()
        tags = []
        for keyword in self.settings.get('KEYWORDS_TO_FIND', []):
            if keyword.lower() in body_text:
                tags.append(keyword)
        loader.add_value('tags', tags)
        
        about_keywords = self.settings.get('ABOUT_PAGE_KEYWORDS', [])
        conditions = [f"contains(translate(., '{k.upper()}', '{k}'), '{k}')" for k in about_keywords]
        conditions += [f"contains(@href, '{k}')" for k in about_keywords]
        
        # --- THE CHANGE IS HERE ---
        # OLD: //footer//a[...] (Searched only in the footer)
        # NEW: //a[...] (Searches the entire page)
        about_link_xpath = f"//a[{' or '.join(conditions)}]/@href"
        
        about_link_selector = response.xpath(about_link_xpath).get()
        
        if about_link_selector:
            about_url = response.urljoin(about_link_selector)
            self.log(f"Found 'About' page via page-wide search: {about_url}")
            yield scrapy.Request(
                url=about_url,
                callback=self.parse_about_page,
                errback=self.handle_about_error,
                meta={'loader': loader}
            )
        else:
            self.log(f"No 'About' link found for {loader.get_output_value('name')}. Finalizing item.")
            yield loader.load_item()

    def parse_about_page(self, response):
        """
        Parses the 'About Us' page to get the self-description using
        a hybrid approach for maximum reliability.
        """
        # 1. Get the loader, just like before.
        loader = response.meta['loader']

        # 2. Scrape the description DIRECTLY from the response, just like your old code.
        #    This avoids any confusion with the loader's internal response.
        #    (Note: I'm using 'p ::text' to get all text, which is a slight improvement).
        p_texts = response.css('p ::text').getall()
        description = ' '.join(text.strip() for text in p_texts if text.strip())

        # 3. Use .add_value() to add the already-scraped text to the loader.
        #    .add_value() doesn't use selectors, so it can't get confused.
        loader.add_value('self_description', description)
        
        self.log(f"Successfully scraped description for {loader.get_output_value('name')}.")
        
        # 4. Yield the final, clean item.
        yield loader.load_item()

    def handle_error(self, failure):
            """
            Handles errors when fetching the provider's external website.
            It logs the error and yields the partial data collected so far.
            """
            loader = failure.request.meta['loader']
            url = loader.get_output_value('website_link')
            name = loader.get_output_value('name')
            
            error_msg = f"Error processing {name} at URL: {url}."
            
            if failure.check(HttpError):
                error_msg += f" HTTP Status: {failure.value.response.status}."
            elif failure.check(DNSLookupError):
                error_msg += " DNS Lookup Error."
            elif failure.check(TimeoutError, TCPTimedOutError):
                error_msg += " Timeout Error."
            else:
                error_msg += f" Unhandled Error: {failure.value}"
                
            self.logger.error(error_msg)
            # Don't lose the data! Yield the item with the info we already scraped.
            yield loader.load_item()

    def handle_about_error(self, failure):
            """
            Handles errors when fetching the 'About Us' page. It logs the
            warning and yields the item without a self-description.
            """
            loader = failure.request.meta['loader']
            name = loader.get_output_value('name')
            self.logger.warning(f"Request to 'About Us' page failed for {name}. Yielding item without description.")
            # We still have the tags and other info, so we yield the item.
            yield loader.load_item()
</code>

platoscience\platoscience\spiders\clinicaltmssociety.py:
<code>
import scrapy
import json
import re

class ClinicaltmssocietySpider(scrapy.Spider):
    name = "clinicaltmssociety"
    allowed_domains = ["clinicaltmssociety.org"]
    
    # We start directly with the AJAX URL that returns the JSON data.
    start_urls = ["https://clinicaltmssociety.org/wp-admin/admin-ajax.php?action=asl_load_stores&nonce=8324d87f17&load_all=1&layout=1"]

    def normalize_phone(self, phone_raw, country):
        """
        Cleans and standardizes a phone number based on its country.
        """
        if not phone_raw:
            return None

        # First, remove all non-digit characters from the phone number string.
        digits = re.sub(r'\D', '', phone_raw)

        # Handle US phone numbers, which can be 10 or 11 digits (with country code).
        if country == 'United States':
            if len(digits) == 10:
                # This is a standard 10-digit US number, so we add the +1.
                return f"+1{digits}"
            elif len(digits) == 11 and digits.startswith('1'):
                # This is an 11-digit number that already includes the 1, so we just add the +.
                return f"+{digits}"
        
        # For non-US numbers, if it's long, we assume it has a country code.
        if len(digits) > 10:
            return f"+{digits}"

        # Fallback for other formats (e.g., short local numbers in other countries).
        return digits

    def parse(self, response):
        """
        The main parsing method. 
        """
        self.log(f'Successfully fetched JSON data from: {response.url}')
        
        try:
            # Load the JSON response text into a Python list of dictionaries
            stores_data = json.loads(response.text)
        except json.JSONDecodeError as e:
            self.log(f"Error parsing JSON response: {e}")
            return

        # Loop through each store in the JSON data
        for store in stores_data:
            
            # Use our helper method to clean the phone number for each store
            phone_number = self.normalize_phone(store.get('phone'), store.get('country'))

            yield {
                'name': store.get('title'),
                'address': store.get('street'),
                'city': store.get('city'),
                'country': store.get('country'),
                'detailed_phone': phone_number,
                'email': store.get('email'),
                'website_link': store.get('website'),
            }

</code>

platoscience\platoscience\spiders\hirnstimulation.py:
<code>
import scrapy
import re

class ClinicSpider(scrapy.Spider):
    """
    A Scrapy spider to extract clinic information from dghp-online.de.
    This spider first scrapes a list of clinics and their websites, then
    visits each website to find contact information.
    """
    name = 'hirnstimulation'
    
    # The starting URL for the spider.
    start_urls = ['https://dghp-online.de/index.php/kliniken']

    # --- How to run this spider ---
    # 1. Make sure you have Scrapy installed: pip install scrapy
    # 2. Save this file as 'hirnstimulation_spider.py' in a Scrapy project's 'spiders' directory.
    #    (To create a project: scrapy startproject clinic_scraper)
    # 3. Run the spider from the project's root directory using the command:
    #    scrapy crawl hirnstimulation -o clinics.json

    def parse(self, response):
        """
        Step 1: Parse the main table of clinics.
        This method extracts the clinic name and website URL, then yields a 
        new request to crawl that specific clinic's website.
        """
        self.log("Starting to parse the main clinic index page.")

        # Select all rows from the main table, skipping the header.
        clinic_rows = response.css('section.article-content table:first-of-type tbody tr')[1:]

        if not clinic_rows:
            self.log("No clinic rows found on the index page. Please check the selector.")
            return

        # Iterate over each row to get the name and link.
        for row in clinic_rows:
            clinic_name_parts = row.css('td:nth-child(1) *::text').getall()
            clinic_name = ' '.join(part.strip() for part in clinic_name_parts if part.strip())
            
            website_url = row.css('td:nth-child(1) a::attr(href)').get()

            if website_url:
                # For each clinic, send a new request to its website.
                # We pass the already scraped data (name, website) to the callback.
                yield response.follow(
                    website_url, 
                    callback=self.parse_clinic_page,
                    cb_kwargs={
                        'name': clinic_name,
                        'website': website_url
                    }
                )
            else:
                # If no website is listed, yield what we have.
                yield {
                    'name': clinic_name,
                    'website': None,
                    'phone_number': None,
                    'email': None
                }

    def parse_clinic_page(self, response, name, website):
        """
        Step 2: Parse the individual clinic's website for contact info.
        This method searches the HTML of the clinic's page for phone and email.
        """
        self.log(f"Parsing clinic page: {name}")
        
        # --- Email Extraction ---
        # First, look for mailto links, as they are the most reliable.
        email = response.css('a[href^="mailto:"]::attr(href)').re_first(r'mailto:(.+)')
        
        # If no mailto link is found, search the entire page text for an email pattern.
        if not email:
            email = response.xpath('//body').re_first(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})')

        # --- Phone Number Extraction ---
        # First, look for tel: links.
        phone = response.css('a[href^="tel:"]::attr(href)').re_first(r'tel:(.+)')

        # If no tel: link is found, search the page text for common phone number patterns.
        # This regex is broad to catch various formats.
        if not phone:
            phone = response.xpath('//body').re_first(r'(\+?\d{1,3}[\s\-\(\)]*\d{2,}[\s\-\(\)]*\d{2,}[\s\-\(\)]*\d+)')

        # Yield the final, complete data for the clinic.
        yield {
            'name': name,
            'website': website,
            'phone_number': phone.strip() if phone else None,
            'email': email.strip() if email else None,
            'country': 'Germany'
        }

</code>

platoscience\platoscience\spiders\magstim.py:
<code>
import scrapy

class MagstimSpider(scrapy.Spider):
    """
    A Scrapy spider to extract clinic information from magstim.com/provider/.
    """
    name = 'magstim'
    
    # The starting URL for the spider.
    start_urls = ['https://magstim.com/provider/']

    def parse(self, response):
        """
        This method parses the provider page, extracting the name, address,
        and website for each clinic listed.
        """
        self.log("Starting to parse magstim.com/provider/")

        # Each clinic is contained within a <div class="place">
        for clinic in response.css('div.place'):
            # Extract the title/name of the clinic
            name = clinic.css('div.title::text').get()
            
            # Extract the address
            address = clinic.css('div.address::text').get()
            
            # Extract the website URL from the link
            website = clinic.css('div.link a::attr(href)').get()

            # Yield the extracted data as a dictionary.
            yield {
                'name': name.strip() if name else None,
                'address': address.strip() if address else None,
                'website': website,
                'country': 'USA'
            }

        self.log(f"Finished parsing. Found {len(response.css('div.place'))} clinics.")

</code>

platoscience\platoscience\spiders\nexstim.py:
<code>
import scrapy
import re

class NexstimSpider(scrapy.Spider):
    """
    A Scrapy spider to extract clinic information from nexstim.com.
    It scrapes clinic details, grouped by country.
    """
    name = 'nexstim'
    
    # The starting URL for the spider.
    start_urls = ['https://www.nexstim.com/patients/users-and-locations']


    def parse(self, response):
        """
        This method parses the main page, iterating through each country section
        and then extracting the details for each clinic within that section.
        """
        self.log("Starting to parse nexstim.com clinic locations.")

        # The page is structured in sections, each starting with a country header.
        # We select all 'grid-accordion' sections.
        for country_section in response.css('section.grid-accordion'):
            # Extract the country name from the h2 tag within the section's header.
            country = country_section.css('.ceheader h2::text').get()

            # Within each country section, find all the clinic content boxes.
            for clinic_box in country_section.css('.contentbox'):
                # Extract the clinic name from the h3 tag.
                name = clinic_box.css('h3::text').get()

                # If a name is found, it's a valid clinic box to process.
                if name:
                    # Extract all text within the <p> tags. This will contain address, phone, etc.
                    # We get all text parts and then join them.
                    p_texts = clinic_box.css('p *::text').getall()
                    full_details = ' '.join(p.strip() for p in p_texts if p.strip())
                    
                    # --- Extract Phone Number ---
                    # Use regex to find a phone number pattern.
                    phone_match = re.search(r'Tel:\s*([+\d\s\(\)-]+)', full_details, re.IGNORECASE)
                    phone = phone_match.group(1).strip() if phone_match else None

                    # --- Extract Email ---
                    # The email is obfuscated in a 'data-mailto-token' attribute.
                    # We can't decode it directly, but the visible text parts are there.
                    email_parts = clinic_box.css('a[data-mailto-token] *::text').getall()
                    email = ''.join(email_parts).strip() if email_parts else None
                    
                    # --- Extract Website ---
                    # The website link has a specific class 'more-link'.
                    website = clinic_box.css('a.more-link::attr(href)').get()
                    
                    # The address is tricky. We'll take all lines from the first <p> tag,
                    # filter out lines with "Tel:", and join the rest.
                    address_lines = clinic_box.css('p:first-of-type::text').getall()
                    address = ' '.join(line.strip() for line in address_lines if 'Tel:' not in line and line.strip())

                    yield {
                        'country': country.strip() if country else None,
                        'clinic_name': name.strip() if name else None,
                        'address': address,
                        'phone_number': phone,
                        'email': email if email else None,
                        'website': response.urljoin(website) if website else None,
                    }

        self.log("Finished parsing clinic locations.")

</code>

platoscience\platoscience\spiders\smarttms.py:
<code>
import scrapy

class SmarttmsSpider(scrapy.Spider):
    name = "smarttms"
    allowed_domains = ["smarttms.co.uk"]
    start_urls = ["https://smarttms.co.uk/clinics/"]

    def parse(self, response):
        """
        The main parsing method. It finds all clinic containers on the page
        and delegates the extraction for each one to the parse_clinic method.
        """
        self.log(f'Successfully fetched: {response.url}')
        
        clinic_containers = response.css('div.location-listing')
        for clinic in clinic_containers:
            # Yield the structured data from each clinic container.
            yield self.parse_clinic(clinic, response.url)

    def parse_clinic(self, clinic, source_url):
        """
        Parses a single clinic container to extract its details.

        Args:
            clinic (scrapy.Selector): The selector for a single clinic's container div.
            source_url (str): The URL of the page where the clinic was found.

        Returns:
            dict: A dictionary containing the scraped data for one clinic.
        """
        name_raw = clinic.css('div.location-title-header::text').get()
        address_lines_raw = clinic.css('div.location-address-details::text').getall()
        phone_raw = clinic.css('div.location-address-details a::attr(href)').get()

        return {
            'name': name_raw.strip() if name_raw else None,
            'address': ' '.join(line.strip() for line in address_lines_raw if line.strip()),
            'detailed_phone': phone_raw.replace('tel:', '') if phone_raw else None,
            'source_url': source_url
        }

</code>

platoscience\platoscience\spiders\__init__.py:
<code>
# This package will contain the spiders of your Scrapy project
#
# Please refer to the documentation for information on how to create and manage
# your spiders.

</code>

platoscience\platoscience\items.py:
<code>
import scrapy
from itemloaders.processors import MapCompose, TakeFirst, Join


def strip_whitespace(value):
    """Custom processor to strip leading/trailing whitespace."""
    return value.strip()

class ProviderItem(scrapy.Item):
    """
    Defines the data structure for a scraped provider.
    Processors are used to clean and format the data automatically
    before it gets saved.
    """
    # --- Input Processors (run on data as it's added) ---
    # MapCompose applies a series of functions to each value.
    # Here, we're just stripping whitespace from every text field.
    name = scrapy.Field(
        input_processor=MapCompose(strip_whitespace),
        output_processor=TakeFirst() # Takes the first non-null value
    )
    source_url = scrapy.Field(
        output_processor=TakeFirst()
    )
    phone = scrapy.Field(
        input_processor=MapCompose(strip_whitespace),
        output_processor=TakeFirst()
    )
    email = scrapy.Field(
        input_processor=MapCompose(strip_whitespace),
        output_processor=TakeFirst()
    )
    website_link = scrapy.Field(
        output_processor=TakeFirst()
    )
    # Join() will join all the collected text with a space.
    self_description = scrapy.Field(
        input_processor=MapCompose(strip_whitespace),
        output_processor=Join(' ')
    )
    # For tags, we don't use TakeFirst() because we want the whole list.
    tags = scrapy.Field()
    

class ClinicItem(scrapy.Item):
    # Core Identity Fields
    clinic_name = scrapy.Field()
    full_address = scrapy.Field()
    phone_number = scrapy.Field()
    clinic_website = scrapy.Field()

    # Provenance & Source Intelligence
    source_name = scrapy.Field()
    source_url = scrapy.Field()
    source_category = scrapy.Field()
    
    # Enriched Strategic Data
    tms_equipment_brand = scrapy.Field()
    provider_tier = scrapy.Field()
    
    # Technical Metadata
    scrape_timestamp = scrapy.Field()


</code>

platoscience\platoscience\middlewares.py:
<code>
# Define here the models for your spider middleware
#
# See documentation in:
# https://docs.scrapy.org/en/latest/topics/spider-middleware.html

from scrapy import signals

# useful for handling different item types with a single interface
from itemadapter import ItemAdapter


class PlatoscienceSpiderMiddleware:
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the spider middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_spider_input(self, response, spider):
        # Called for each response that goes through the spider
        # middleware and into the spider.

        # Should return None or raise an exception.
        return None

    def process_spider_output(self, response, result, spider):
        # Called with the results returned from the Spider, after
        # it has processed the response.

        # Must return an iterable of Request, or item objects.
        for i in result:
            yield i

    def process_spider_exception(self, response, exception, spider):
        # Called when a spider or process_spider_input() method
        # (from other spider middleware) raises an exception.

        # Should return either None or an iterable of Request or item objects.
        pass

    async def process_start(self, start):
        # Called with an async iterator over the spider start() method or the
        # maching method of an earlier spider middleware.
        async for item_or_request in start:
            yield item_or_request

    def spider_opened(self, spider):
        spider.logger.info("Spider opened: %s" % spider.name)


class PlatoscienceDownloaderMiddleware:
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the downloader middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_request(self, request, spider):
        # Called for each request that goes through the downloader
        # middleware.

        # Must either:
        # - return None: continue processing this request
        # - or return a Response object
        # - or return a Request object
        # - or raise IgnoreRequest: process_exception() methods of
        #   installed downloader middleware will be called
        return None

    def process_response(self, request, response, spider):
        # Called with the response returned from the downloader.

        # Must either;
        # - return a Response object
        # - return a Request object
        # - or raise IgnoreRequest
        return response

    def process_exception(self, request, exception, spider):
        # Called when a download handler or a process_request()
        # (from other downloader middleware) raises an exception.

        # Must either:
        # - return None: continue processing this exception
        # - return a Response object: stops process_exception() chain
        # - return a Request object: stops process_exception() chain
        pass

    def spider_opened(self, spider):
        spider.logger.info("Spider opened: %s" % spider.name)

</code>

platoscience\platoscience\pipelines.py:
<code>
# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
from itemadapter import ItemAdapter
import re

class PlatosciencePipeline:
    def process_item(self, item, spider):
        return item

class DataCleaningPipeline:
    """
    This pipeline takes the scraped item and cleans the data before it gets saved.
    """

    def process_item(self, item, spider):
        """
        This method is called for every single item that the spider yields.
        'item' is the dictionary of data we scraped (name, address, phone, etc.).
        'spider' is the spider that scraped it.
        """

        # --- Task 1: Clean and Standardize Phone Numbers ---
        if item.get('detailed_phone'):
            phone_number = item['detailed_phone']
            # This strips out anything that is not a digit.
            cleaned_number = re.sub(r'\D', '', phone_number)
            item['detailed_phone'] = cleaned_number

        # --- Task 2: Parse the Address String (Improved Logic) ---
        if item.get('detailed_address'):
            # First, clean up common trailing text like country names
            address_string = item['detailed_address'].replace(' United States', '').replace(' Country', '').strip()
            
            # Initialize new address fields to None to ensure they always exist
            item['street'] = None
            item['city'] = None
            item['state'] = None
            item['zip_code'] = None

            # This regex finds the state and zip code at the end of the string
            match = re.search(r'^(.*),\s*([A-Z]{2})\s*(\d{5})$', address_string)
            
            if match:
                # The first group contains the street and city combined.
                street_and_city_part = match.group(1).strip()
                item['state'] = match.group(2).strip()
                item['zip_code'] = match.group(3).strip()
                
                # --- New, smarter logic to separate street from city ---
                parts = street_and_city_part.split(' ')
                city_parts = []
                street_parts = []
                
                # We work backwards from the end of the string.
                # The city is usually the last few words that don't contain numbers.
                # Once we find a part with a number (like a street number or suite #),
                # we know that part and everything before it belongs to the street.
                found_street_part = False
                for part in reversed(parts):
                    if not found_street_part and not any(char.isdigit() for char in part):
                        # If we haven't found the street yet and this part is just letters,
                        # it's probably part of the city name.
                        city_parts.insert(0, part)
                    else:
                        # We found a number or we've already found the whole city.
                        # This part belongs to the street.
                        found_street_part = True
                        street_parts.insert(0, part)

                item['street'] = ' '.join(street_parts)
                item['city'] = ' '.join(city_parts)

        # After we're done cleaning, we MUST return the item.
        return item


</code>

platoscience\platoscience\settings.py:
<code>
# Scrapy settings for platoscience project
#
# For simplicity, this file contains only settings considered important or
# commonly used. You can find more settings consulting the documentation:
#
#     https://docs.scrapy.org/en/latest/topics/settings.html
#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html
#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html

BOT_NAME = "platoscience"

SPIDER_MODULES = ["platoscience.spiders"]
NEWSPIDER_MODULE = "platoscience.spiders"

ADDONS = {}

# --- CUSTOM SETTINGS FOR BRAINSWAY SPIDER ---

KEYWORDS_TO_FIND = [
    "tms", "rtms", "dtms", "tbs", "eeg", "qeeg", "neurofeedback", 
    "biofeedback", "neuromodulation", "brain mapping", "erp", 
    "depression", "mdd", "ocd", "anxiety", "ptsd", "adhd", "add", 
    "peak performance", "cognitive enhancement", "stroke rehabilitation", 
    "chronic pain", "migraine", "psychiatrist", "neurologist", 
    "neuropsychologist", "therapist", "bcn", "qeeg-d", 
    "mental health professional", "behavioral health", "clinic", 
    "wellness center", "rehabilitation center", "private practice", 
    "hospital", "neuroscience center", "university research", 
    "clinical trials", "telehealth", "telepsychiatry", "digital health", 
    "brain stimulation", "neurotechnology", "mental wellness", 
    "non-invasive treatment", "integrative medicine"
]

ABOUT_PAGE_KEYWORDS = [
    'about', 'team', 'story', 'mission', 'vision', 
    'clinic', 'company', 'who-we-are', 'our-practice'
]


# Crawl responsibly by identifying yourself (and your website) on the user-agent
#USER_AGENT = "platoscience (+http://www.yourdomain.com)"

# Obey robots.txt rules
ROBOTSTXT_OBEY = True

# Concurrency and throttling settings
#CONCURRENT_REQUESTS = 16
CONCURRENT_REQUESTS_PER_DOMAIN = 1
DOWNLOAD_DELAY = 1

# Disable cookies (enabled by default)
#COOKIES_ENABLED = False

# Disable Telnet Console (enabled by default)
#TELNETCONSOLE_ENABLED = False

# Override the default request headers:
#DEFAULT_REQUEST_HEADERS = {
#    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
#    "Accept-Language": "en",
#}

# Enable or disable spider middlewares
# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html
#SPIDER_MIDDLEWARES = {
#    "platoscience.middlewares.PlatoscienceSpiderMiddleware": 543,
#}

# Enable or disable downloader middlewares
# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html
#DOWNLOADER_MIDDLEWARES = {
#    "platoscience.middlewares.PlatoscienceDownloaderMiddleware": 543,
#}

# Enable or disable extensions
# See https://docs.scrapy.org/en/latest/topics/extensions.html
#EXTENSIONS = {
#    "scrapy.extensions.telnet.TelnetConsole": None,
#}

# Configure item pipelines
# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html
ITEM_PIPELINES = {
#    "platoscience.pipelines.PlatosciencePipeline": 300,
    "platoscience.pipelines.DataCleaningPipeline": 400,}

# Enable and configure the AutoThrottle extension (disabled by default)
# See https://docs.scrapy.org/en/latest/topics/autothrottle.html
#AUTOTHROTTLE_ENABLED = True
# The initial download delay
#AUTOTHROTTLE_START_DELAY = 5
# The maximum download delay to be set in case of high latencies
#AUTOTHROTTLE_MAX_DELAY = 60
# The average number of requests Scrapy should be sending in parallel to
# each remote server
#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0
# Enable showing throttling stats for every response received:
#AUTOTHROTTLE_DEBUG = False

# Enable and configure HTTP caching (disabled by default)
# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings
#HTTPCACHE_ENABLED = True
#HTTPCACHE_EXPIRATION_SECS = 0
#HTTPCACHE_DIR = "httpcache"
#HTTPCACHE_IGNORE_HTTP_CODES = []
#HTTPCACHE_STORAGE = "scrapy.extensions.httpcache.FilesystemCacheStorage"

# Set settings whose default value is deprecated to a future-proof value
FEED_EXPORT_ENCODING = "utf-8"

</code>

platoscience\platoscience\__init__.py:
<code>

</code>

platoscience\run_pipeline.py:
<code>
import os
import subprocess
import json
import pandas as pd
# You would eventually import your database connection library here
# from sqlalchemy import create_engine

# A list of all your spider names
SPIDER_NAMES = [
    'brainsway',
    'clinicaltmssociety',
    'hirnstimulation',
    'magstim',
    'nexstim',
    'smarttms'
]

def run_spiders():
    """
    Executes all Scrapy spiders sequentially, creating a raw JSON file for each.
    """
    print("--- 1. Starting Spider Execution ---")
    output_files = []
    for spider_name in SPIDER_NAMES:
        output_file = f'output_{spider_name}_raw.json'
        # The command to run a spider and save its output
        command = [
            'scrapy', 'crawl', spider_name,
            '-o', output_file,
        ]
        print(f"Running spider: {spider_name}...")
        subprocess.run(command, check=True)
        output_files.append(output_file)
    print("--- All spiders finished. ---\n")
    return output_files

def consolidate_data(file_paths):
    """
    Reads all raw JSON files and consolidates them into a single Pandas DataFrame.
    """
    print("--- 2. Consolidating Raw Data ---")
    all_data = []
    for file_path in file_paths:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Loaded {len(data)} records from {file_path}")
                all_data.extend(data)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Warning: Could not process {file_path}. Reason: {e}")
    
    print(f"--- Total raw records consolidated: {len(all_data)} ---\n")
    return pd.DataFrame(all_data)

def clean_and_transform(df):
    """
    Applies all data cleaning, normalization, and deduplication logic.
    This is where your "Data Janitor" logic lives.
    """
    print("--- 3. Cleaning and Transforming Data ---")
    
    # Example: Drop rows where the name is missing
    df.dropna(subset=['name'], inplace=True)
    
    # Example: Standardize country names (can be expanded)
    df['country'].replace({'USA': 'United States'}, inplace=True)

    # Example: Remove duplicates based on website or name/city
    df.drop_duplicates(subset=['website'], keep='first', inplace=True)

    # ... Here you would add phone formatting, address parsing, etc.
    
    print(f"--- Data cleaned. Final record count: {len(df)} ---\n")
    return df

def load_data(df):
    """
    Loads the final, cleaned DataFrame into its destination.
    For now, we save to a clean JSON. Later, this will load to a database.
    """
    print("--- 4. Loading Clean Data ---")
    clean_output_file = 'master_clinic_list_CLEANED.json'
    df.to_json(clean_output_file, orient='records', indent=4)
    print(f"üéâ Success! Clean data saved to '{clean_output_file}'")
    
    # --- DATABASE LOGIC (Future Step) ---
    # try:
    #     engine = create_engine('postgresql://user:password@host/dbname')
    #     df.to_sql('clinics', engine, if_exists='replace', index=False)
    #     print("üéâ Success! Data loaded into the 'clinics' database table.")
    # except Exception as e:
    #     print(f"Error loading data to database: {e}")

def main():
    """Orchestrates the entire ETL pipeline."""
    # Step 1
    raw_file_paths = run_spiders()
    
    # Step 2
    consolidated_df = consolidate_data(raw_file_paths)
    
    # Step 3
    cleaned_df = clean_and_transform(consolidated_df)
    
    # Step 4
    load_data(cleaned_df)

if __name__ == '__main__':
    main()
</code>

platoscience\scrapy.cfg:
<code>
# Automatically created by: scrapy startproject
#
# For more information about the [deploy] section see:
# https://scrapyd.readthedocs.io/en/latest/deploy.html

[settings]
default = platoscience.settings

[deploy]
#url = http://localhost:6800/
project = platoscience

</code>

web-app\index.html:
<code>
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Lead Generation Dashboard</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <link
            href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
            rel="stylesheet"
        />
        <link rel="stylesheet" href="styles.css" />
    </head>
    <body class="bg-gray-100 text-gray-800">
        <div class="container mx-auto p-4 md:p-8">
            <header class="mb-8">
                <h1 class="text-4xl font-bold text-gray-900">
                    Platoscience Lead Dashboard
                </h1>
                <p class="text-lg text-gray-600">Clinics providing TMS</p>
            </header>

            <div class="bg-white p-4 rounded-lg shadow-md mb-6">
                <label
                    for="jsonUpload"
                    class="block text-sm font-medium text-gray-700 mb-2"
                    >Load Clinic Data:</label
                >
                <input
                    type="file"
                    id="jsonUpload"
                    accept=".json"
                    class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                />
                <p
                    id="file-upload-status"
                    class="text-sm text-gray-500 mt-2"
                ></p>
            </div>

            <div
                class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8"
            >
                <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                    <h3 class="text-gray-500 text-sm font-medium">
                        Total Leads
                    </h3>
                    <p
                        id="totalLeadsStat"
                        class="text-3xl font-bold text-gray-900"
                    >
                        0
                    </p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                    <h3 class="text-gray-500 text-sm font-medium">
                        Leads with Email
                    </h3>
                    <p
                        id="emailLeadsStat"
                        class="text-3xl font-bold text-green-600"
                    >
                        0
                    </p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                    <h3 class="text-gray-500 text-sm font-medium">
                        Leads with Phone
                    </h3>
                    <p
                        id="phoneLeadsStat"
                        class="text-3xl font-bold text-blue-600"
                    >
                        0
                    </p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                    <h3 class="text-gray-500 text-sm font-medium">
                        Countries Represented
                    </h3>
                    <p
                        id="countryCountStat"
                        class="text-3xl font-bold text-purple-600"
                    >
                        0
                    </p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-md stat-card">
                    <h3
                        id="continentLeadsTitle"
                        class="text-gray-500 text-sm font-medium"
                    >
                        Leads in Continent
                    </h3>
                    <p
                        id="continentLeadsStat"
                        class="text-3xl font-bold text-orange-600"
                    >
                        N/A
                    </p>
                </div>
            </div>

            <div
                class="bg-white p-4 rounded-lg shadow-md mb-6 flex flex-col md:flex-row gap-4 items-center flex-wrap"
            >
                <div class="relative flex-grow w-full sm:w-auto">
                    <input
                        type="text"
                        id="searchInput"
                        placeholder="Search by name, country, or city..."
                        class="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <svg
                        class="w-5 h-5 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                        ></path>
                    </svg>
                </div>
                <select
                    id="continentFilter"
                    class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    <option value="">All Continents</option>
                </select>
                <select
                    id="countryFilter"
                    class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    <option value="">All Countries</option>
                </select>
                <select
                    id="contactFilter"
                    class="w-full sm:w-auto p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    <option value="">All Contacts</option>
                    <option value="phoneAndEmail">Has Phone & Email</option>
                    <option value="phoneOnly">Has Phone</option>
                    <option value="emailOnly">Has Email</option>
                </select>
                <div
                    class="text-right text-gray-600 font-medium w-full sm:w-auto sm:ml-auto"
                >
                    <span id="clinicCount">0</span> clinics found
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="overflow-x-auto table-scrollbar">
                    <table class="w-full text-left">
                        <thead class="bg-gray-50 border-b border-gray-200">
                            <tr>
                                <th
                                    class="p-4 font-semibold sortable"
                                    data-sort="name"
                                >
                                    Name
                                </th>
                                <th
                                    class="p-4 font-semibold sortable"
                                    data-sort="country"
                                >
                                    Location
                                </th>
                                <th class="p-4 font-semibold">Contact</th>
                                <th
                                    class="p-4 font-semibold sortable"
                                    data-sort="score"
                                >
                                    Lead Score
                                </th>
                                <th class="p-4 font-semibold">Source</th>
                                <th class="p-4 font-semibold">Status</th>
                            </tr>
                        </thead>
                        <tbody id="clinicTableBody">
                            <tr>
                                <td
                                    colspan="6"
                                    class="p-4 text-center text-gray-500"
                                >
                                    Please upload your 'master_clinic_list.json'
                                    file to begin.
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div
                    id="paginationControls"
                    class="p-4 flex items-center justify-between border-t border-gray-200"
                ></div>
            </div>
        </div>

        <script src="script.js" defer></script>
    </body>
</html>

</code>

web-app\script.js:
<code>
const tableBody = document.getElementById("clinicTableBody");
const searchInput = document.getElementById("searchInput");
const countryFilter = document.getElementById("countryFilter");
const continentFilter = document.getElementById("continentFilter");
const contactFilter = document.getElementById("contactFilter");
const clinicCount = document.getElementById("clinicCount");
const jsonUpload = document.getElementById("jsonUpload");
const uploadStatus = document.getElementById("file-upload-status");
const paginationControls = document.getElementById("paginationControls");

const totalLeadsStat = document.getElementById("totalLeadsStat");
const emailLeadsStat = document.getElementById("emailLeadsStat");
const phoneLeadsStat = document.getElementById("phoneLeadsStat");
const countryCountStat = document.getElementById("countryCountStat");
const continentLeadsStat = document.getElementById("continentLeadsStat");
const continentLeadsTitle = document.getElementById("continentLeadsTitle");

let allClinics = [];
let filteredClinics = [];
let leadStatuses = {};
let currentSort = { key: "score", direction: "desc" };
let currentPage = 1;
const rowsPerPage = 20;

const countryToContinent = {
    USA: "North America",
    "United States": "North America",
    Canada: "North America",
    Mexico: "North America",
    Germany: "Europe",
    "United Kingdom": "Europe",
    France: "Europe",
    Italy: "Europe",
    Spain: "Europe",
    Switzerland: "Europe",
    Austria: "Europe",
    Belgium: "Europe",
    Netherlands: "Europe",
    Sweden: "Europe",
    Norway: "Europe",
    Denmark: "Europe",
    Finland: "Europe",
    Ireland: "Europe",
    Portugal: "Europe",
    Greece: "Europe",
    Poland: "Europe",
    Hungary: "Europe",
    Croatia: "Europe",
    Ukraine: "Europe",
    Australia: "Oceania",
    Japan: "Asia",
    Israel: "Asia",
    Turkey: "Asia",
    Thailand: "Asia",
    Taiwan: "Asia",
    "Hong Kong": "Asia",
    Singapore: "Asia",
    India: "Asia",
    Philippines: "Asia",
    Nepal: "Asia",
    "South Africa": "Africa",
    Brazil: "South America",
    Ecuador: "South America",
    Chile: "South America",
    Peru: "South America",
    Paraguay: "South America",
};

function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
        try {
            const rawData = JSON.parse(e.target.result);
            allClinics = rawData.map((c) => ({
                ...c,
                continent: countryToContinent[c.country] || "Other",
                score: calculateLeadScore(c),
            }));

            uploadStatus.textContent = `Successfully loaded ${allClinics.length} clinics from ${file.name}.`;
            uploadStatus.className = "text-sm text-green-600 mt-2";
            loadStatuses();
            populateContinentFilter();
            populateCountryFilter();
            updateStatistics();
            filterData();
        } catch (error) {
            uploadStatus.textContent = `Error parsing JSON file: ${error.message}`;
            uploadStatus.className = "text-sm text-red-600 mt-2";
        }
    };
    reader.readAsText(file);
}

function calculateLeadScore(clinic) {
    let score = 0;
    if (clinic.email) score += 3;
    if (clinic.phone) score += 2;
    if (clinic.website && clinic.website !== "#") score += 1;
    return score;
}

function updateStatistics() {
    totalLeadsStat.textContent = allClinics.length;
    emailLeadsStat.textContent = allClinics.filter((c) => c.email).length;
    phoneLeadsStat.textContent = allClinics.filter((c) => c.phone).length;
    countryCountStat.textContent = [
        ...new Set(
            allClinics.map((c) => c.country).filter((c) => c && c !== "N/A")
        ),
    ].length;
}

function populateContinentFilter() {
    continentFilter.innerHTML = '<option value="">All Continents</option>';
    const continents = [...new Set(allClinics.map((c) => c.continent))].sort();
    continents.forEach((continent) => {
        const option = document.createElement("option");
        option.value = continent;
        option.textContent = continent;
        continentFilter.appendChild(option);
    });
}

function populateCountryFilter(selectedContinent = "") {
    countryFilter.innerHTML = '<option value="">All Countries</option>';
    const countries = [
        ...new Set(
            allClinics
                .filter((c) =>
                    selectedContinent ? c.continent === selectedContinent : true
                )
                .map((c) => c.country)
                .filter(Boolean)
        ),
    ].sort();

    countries.forEach((country) => {
        const option = document.createElement("option");
        option.value = country;
        option.textContent = country;
        countryFilter.appendChild(option);
    });
}

function renderTable() {
    // Sort the already filtered data
    filteredClinics.sort((a, b) => {
        const valA = a[currentSort.key];
        const valB = b[currentSort.key];
        let comparison = 0;
        if (valA > valB) {
            comparison = 1;
        } else if (valA < valB) {
            comparison = -1;
        }
        return currentSort.direction === "asc" ? comparison : -comparison;
    });

    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    const paginatedClinics = filteredClinics.slice(startIndex, endIndex);

    if (paginatedClinics.length === 0) {
        tableBody.innerHTML =
            '<tr><td colspan="6" class="p-4 text-center text-gray-500">No clinics match your search.</td></tr>';
    } else {
        let tableHTML = "";
        paginatedClinics.forEach((clinic) => {
            const status = leadStatuses[clinic.name] || "New";
            const sanitizedName = (clinic.name || "")
                .replace(/["‚Äú‚Äù]/g, "&quot;")
                .replace(/'/g, "&#39;");
            tableHTML += `
                <tr class="border-b border-gray-200 hover:bg-gray-50">
                    <td class="p-4 align-top">
                        <div class="font-bold text-gray-900">${
                            clinic.name
                        }</div>
                        <a href="${
                            clinic.website
                        }" target="_blank" class="text-blue-600 hover:underline text-sm">${
                clinic.website !== "#" ? clinic.website : ""
            }</a>
                    </td>
   <td class="p-4 align-top text-sm text-gray-600">

    <div title="${clinic.address || ""}">${
                truncate(clinic.address, 70) || ""
            }</div>
    <span class="font-medium">${clinic.city || ""}, ${
                clinic.country || ""
            }</span>
</td>
                    <td class="p-4 align-top text-sm">
                        ${
                            clinic.email
                                ? `<a href="mailto:${clinic.email}" class="text-blue-600 hover:underline">${clinic.email}</a><br>`
                                : ""
                        }
                        ${
                            clinic.phone
                                ? `<span class="text-gray-600">${clinic.phone}</span>`
                                : ""
                        }
                    </td>
                    <td class="p-4 align-top text-center font-bold text-lg ${
                        clinic.score > 4
                            ? "text-green-600"
                            : clinic.score > 2
                            ? "text-yellow-600"
                            : "text-red-600"
                    }">${clinic.score}</td>
                    <td class="p-4 align-top text-sm text-gray-500">${
                        clinic.source
                    }</td>
                    <td class="p-4 align-top">
                        <select class="status-dropdown p-2 border border-gray-300 rounded-md" data-clinic-name="${sanitizedName}">
                            <option value="New" ${
                                status === "New" ? "selected" : ""
                            }>New</option>
                            <option value="Contacted" ${
                                status === "Contacted" ? "selected" : ""
                            }>Contacted</option>
                            <option value="Engaged" ${
                                status === "Engaged" ? "selected" : ""
                            }>Engaged</option>
                            <option value="Qualified" ${
                                status === "Qualified" ? "selected" : ""
                            }>Qualified</option>
                            <option value="Not a Fit" ${
                                status === "Not a Fit" ? "selected" : ""
                            }>Not a Fit</option>
                        </select>
                    </td>
                </tr>
            `;
        });
        tableBody.innerHTML = tableHTML;
    }

    clinicCount.textContent = filteredClinics.length;
    renderPaginationControls(filteredClinics.length);
    addStatusListeners();
}

function renderPaginationControls(totalItems) {
    paginationControls.innerHTML = "";
    const totalPages = Math.ceil(totalItems / rowsPerPage);
    if (totalPages <= 1) return;

    const startItem = (currentPage - 1) * rowsPerPage + 1;
    const endItem = Math.min(currentPage * rowsPerPage, totalItems);

    const summary = document.createElement("p");
    summary.className = "text-sm text-gray-700";
    summary.textContent = `Showing ${startItem} to ${endItem} of ${totalItems} results`;

    const buttonsDiv = document.createElement("div");
    buttonsDiv.className = "flex gap-2";

    const prevButton = document.createElement("button");
    prevButton.textContent = "Previous";
    prevButton.className = "pagination-btn";
    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener("click", () => {
        currentPage--;
        renderTable();
    });

    const nextButton = document.createElement("button");
    nextButton.textContent = "Next";
    nextButton.className = "pagination-btn";
    nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener("click", () => {
        currentPage++;
        renderTable();
    });

    buttonsDiv.appendChild(prevButton);
    buttonsDiv.appendChild(nextButton);
    paginationControls.appendChild(summary);
    paginationControls.appendChild(buttonsDiv);
}

function filterData() {
    const searchTerm = searchInput.value.toLowerCase();
    const selectedCountry = countryFilter.value;
    const selectedContinent = continentFilter.value;
    const selectedContact = contactFilter.value;

    filteredClinics = allClinics.filter((clinic) => {
        const c = clinic; // alias for brevity
        const matchesSearch =
            c.name.toLowerCase().includes(searchTerm) ||
            (c.country && c.country.toLowerCase().includes(searchTerm)) ||
            (c.city && c.city.toLowerCase().includes(searchTerm));
        const matchesContinent =
            !selectedContinent || c.continent === selectedContinent;
        const matchesCountry =
            !selectedCountry || c.country === selectedCountry;
        const matchesContact =
            !selectedContact ||
            (selectedContact === "phoneAndEmail" && c.phone && c.email) ||
            (selectedContact === "phoneOnly" && c.phone) ||
            (selectedContact === "emailOnly" && c.email);
        return (
            matchesSearch &&
            matchesContinent &&
            matchesCountry &&
            matchesContact
        );
    });

    currentPage = 1;

    if (selectedContinent) {
        continentLeadsTitle.textContent = `Leads in ${selectedContinent}`;
        const continentCount = allClinics.filter(
            (c) => c.continent === selectedContinent
        ).length;
        continentLeadsStat.textContent = continentCount;
    } else {
        continentLeadsTitle.textContent = "Leads in Continent";
        continentLeadsStat.textContent = "N/A";
    }

    renderTable();
}

function saveStatus(clinicName, status) {
    leadStatuses[clinicName] = status;
    localStorage.setItem("leadStatuses", JSON.stringify(leadStatuses));
}

function loadStatuses() {
    const saved = localStorage.getItem("leadStatuses");
    if (saved) {
        leadStatuses = JSON.parse(saved);
    }
}

function addStatusListeners() {
    document.querySelectorAll(".status-dropdown").forEach((dropdown) => {
        dropdown.addEventListener("change", (e) => {
            const clinicName = e.target.dataset.clinicName;
            const newStatus = e.target.value;
            saveStatus(clinicName, newStatus);
        });
    });
}

function handleSort(e) {
    const key = e.target.dataset.sort;
    if (!key) return;

    document.querySelectorAll(".sortable").forEach((th) => {
        if (th !== e.target) {
            th.classList.remove("sort-asc", "sort-desc");
        }
    });

    if (currentSort.key === key) {
        currentSort.direction =
            currentSort.direction === "asc" ? "desc" : "asc";
    } else {
        currentSort.key = key;
        currentSort.direction = "asc";
    }

    e.target.classList.remove("sort-asc", "sort-desc");
    e.target.classList.add(
        currentSort.direction === "asc" ? "sort-asc" : "sort-desc"
    );

    renderTable();
}

/**
 * Truncates a string to a specified length and adds an ellipsis.
 * @param {string} str The string to truncate.
 * @param {number} maxLength The maximum length of the string.
 * @returns {string} The truncated string.
 */
function truncate(str, maxLength) {
    if (!str || str.length <= maxLength) {
        return str;
    }
    return str.substring(0, maxLength) + "...";
}

// Initial Event Listeners
searchInput.addEventListener("input", filterData);
countryFilter.addEventListener("change", filterData);
continentFilter.addEventListener("change", (e) => {
    populateCountryFilter(e.target.value);
    filterData();
});
contactFilter.addEventListener("change", filterData);
jsonUpload.addEventListener("change", handleFileUpload);
document.querySelectorAll(".sortable").forEach((header) => {
    header.addEventListener("click", handleSort);
});

</code>

web-app\styles.css:
<code>
body {
    font-family: "Inter", sans-serif;
}

/* Custom Scrollbar */
.table-scrollbar::-webkit-scrollbar {
    width: 5px;
    height: 5px;
}
.table-scrollbar::-webkit-scrollbar-thumb {
    background-color: #a0aec0;
    border-radius: 10px;
}
.table-scrollbar::-webkit-scrollbar-track {
    background-color: #edf2f7;
}

/* Stat Card Hover Effect */
.stat-card {
    transition: transform 0.2s ease-in-out;
}
.stat-card:hover {
    transform: translateY(-5px);
}

/* Sortable Table Header */
.sortable {
    position: relative; /* Needed for positioning the arrow */
    cursor: pointer;
}
.sortable:hover {
    background-color: #f0f4f8;
}
.sortable::after {
    content: "";
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.3;
    border: 4px solid transparent;
}
.sort-asc::after {
    opacity: 1;
    border-bottom-color: #374151; /* gray-700 */
}
.sort-desc::after {
    opacity: 1;
    border-top-color: #374151; /* gray-700 */
}

/* Pagination Button Styles (converted from @apply) */
.pagination-btn {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db;
    font-size: 0.875rem;
    font-weight: 500;
    border-radius: 0.375rem;
    color: #374151;
    background-color: #ffffff;
}
.pagination-btn:hover {
    background-color: #f9fafb;
}
.pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

</code>

hash.txt:
<code>
fa31d89c9e738fc1c1acafb5385c0499

</code>

package-lock.json:
<code>
{
  "name": "web-scraping",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}

</code>

README.md:
<code>
# Platoscience
Platoscience repository

</code>

run_pipeline.py:
<code>
import os
import subprocess
import json
import pandas as pd
# You would eventually import your database connection library here
# from sqlalchemy import create_engine

# A list of all your spider names
SPIDER_NAMES = [
    'brainsway',
    'clinicaltmssociety',
    'hirnstimulation',
    'magstim',
    'nexstim',
    'smarttms'
]

def run_spiders():
    """
    Executes all Scrapy spiders sequentially, creating a raw JSON file for each.
    """
    print("--- 1. Starting Spider Execution ---")
    output_files = []
    for spider_name in SPIDER_NAMES:
        output_file = f'output_{spider_name}_raw.json'
        # The command to run a spider and save its output
        command = [
            'scrapy', 'crawl', spider_name,
            '-o', output_file,
            '--nolog' # Optional: keeps the console output clean
        ]
        print(f"Running spider: {spider_name}...")
        subprocess.run(command, check=True)
        output_files.append(output_file)
    print("--- All spiders finished. ---\n")
    return output_files

def consolidate_data(file_paths):
    """
    Reads all raw JSON files and consolidates them into a single Pandas DataFrame.
    """
    print("--- 2. Consolidating Raw Data ---")
    all_data = []
    for file_path in file_paths:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Loaded {len(data)} records from {file_path}")
                all_data.extend(data)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Warning: Could not process {file_path}. Reason: {e}")
    
    print(f"--- Total raw records consolidated: {len(all_data)} ---\n")
    return pd.DataFrame(all_data)

def clean_and_transform(df):
    """
    Applies all data cleaning, normalization, and deduplication logic.
    This is where your "Data Janitor" logic lives.
    """
    print("--- 3. Cleaning and Transforming Data ---")
    
    # Example: Standardize country names (can be expanded)
    df['country'].replace({'USA': 'United States'}, inplace=True)

    # Example: Remove duplicates based on website or name/city
    df.drop_duplicates(subset=['website'], keep='first', inplace=True)

    # ... Here you would add phone formatting, address parsing, etc.
    
    print(f"--- Data cleaned. Final record count: {len(df)} ---\n")
    return df

def load_data(df):
    """
    Loads the final, cleaned DataFrame into its destination.
    For now, we save to a clean JSON. Later, this will load to a database.
    """
    print("--- 4. Loading Clean Data ---")
    clean_output_file = 'master_clinic_list_CLEANED.json'
    df.to_json(clean_output_file, orient='records', indent=4)
    print(f"üéâ Success! Clean data saved to '{clean_output_file}'")
    
    # --- DATABASE LOGIC (Future Step) ---
    # try:
    #     engine = create_engine('postgresql://user:password@host/dbname')
    #     df.to_sql('clinics', engine, if_exists='replace', index=False)
    #     print("üéâ Success! Data loaded into the 'clinics' database table.")
    # except Exception as e:
    #     print(f"Error loading data to database: {e}")

def main():
    """Orchestrates the entire ETL pipeline."""
    # Step 1
    //raw_file_paths = run_spiders()
    
    # Step 2
    consolidated_df = consolidate_data(raw_file_paths)
    
    # Step 3
    cleaned_df = clean_and_transform(consolidated_df)
    
    # Step 4
    load_data(cleaned_df)

if __name__ == '__main__':
    main()
</code>



Please analyze this code for: Error handling, Edge cases, Performance optimization, Best practices, Please do not unnecessarily remove any comments or code. Generate the code with clear comments explaining the logic.